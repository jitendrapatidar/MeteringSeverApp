{"version":3,"file":"selectedCellUtils.js","sourceRoot":"","sources":["../../src/utils/selectedCellUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { CellNavigationMode } from '../common/enums';\nimport { canEdit } from './columnUtils';\nimport { CalculatedColumn, Position, Dimension } from '../common/types';\n\n// above unfrozen cells, below frozen cells\nconst zCellMask = 1;\n// above frozen cells, below header/filter/summary rows\nconst zFrozenCellMask = 2;\n\ninterface GetSelectedDimensionsOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowHeight: number;\n  scrollLeft: number;\n}\n\nexport function getSelectedDimensions<R, SR>({ selectedPosition: { idx, rowIdx }, columns, rowHeight, scrollLeft }: GetSelectedDimensionsOpts<R, SR>): Dimension {\n  if (idx < 0) {\n    return { width: 0, left: 0, top: 0, height: rowHeight, zIndex: 1 };\n  }\n  const column = columns[idx];\n  const { width } = column;\n  const left = column.frozen ? column.left + scrollLeft : column.left;\n  const top = rowIdx * rowHeight;\n  const zIndex = column.frozen ? zFrozenCellMask : zCellMask;\n  return { width, left, top, height: rowHeight, zIndex };\n}\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  onCheckCellIsEditable?: (arg: { row: R; column: CalculatedColumn<R, SR> } & Position) => boolean;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, onCheckCellIsEditable }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  const isCellEditable = onCheckCellIsEditable ? onCheckCellIsEditable({ row, column, ...selectedPosition }) : true;\n  return isCellEditable && canEdit<R, SR>(column, row);\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== CellNavigationMode.NONE) {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === CellNavigationMode.CHANGE_ROW) {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === CellNavigationMode.LOOP_OVER_ROW) {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === CellNavigationMode.CHANGE_ROW) {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === CellNavigationMode.LOOP_OVER_ROW) {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n}\n\nexport function canExitGrid<R, SR>(event: React.KeyboardEvent, { cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx } }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === CellNavigationMode.NONE || cellNavigationMode === CellNavigationMode.CHANGE_ROW) {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n    const shift = event.shiftKey === true;\n\n    return shift ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n"]}