{"version":3,"file":"FilterRow.js","sourceRoot":"","sources":["../src/FilterRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,UAAU,MAAM,YAAY,CAAC;AAepC,SAAS,SAAS,CAAQ,EACxB,OAAO,EACP,qBAAqB,EACrB,OAAO,EACP,eAAe,EACO;IACtB,SAAS,QAAQ,CAAC,GAAW,EAAE,KAAc;QAC3C,MAAM,UAAU,GAAY,EAAE,GAAG,OAAO,EAAE,CAAC;QAC3C,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACxB,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,UAAU,EAAE;IAChC,CAAC;IAED,OAAO,CACL,6BAAK,SAAS,EAAC,gBAAgB,IAC5B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;QACpB,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC;QAEvB,MAAM,SAAS,GAAG,UAAU,CAAC,UAAU,EAAE;YACvC,iBAAiB,EAAE,MAAM,CAAC,MAAM;YAChC,sBAAsB,EAAE,MAAM,CAAC,GAAG,KAAK,qBAAqB;SAC7D,CAAC,CAAC;QACH,MAAM,KAAK,GAAwB;YACjC,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAC;QAEF,OAAO,CACL,6BACE,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,SAAS,IAEnB,MAAM,CAAC,cAAc,IAAI,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE;YAC7D,MAAM;YACN,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,MAAM,CAAC,GAAG,CAAC;YAC5B,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC;SACxC,CAAC,CACE,CACP,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,SAAS,CAAyD,CAAC","sourcesContent":["import React, { createElement, memo } from 'react';\nimport classNames from 'classnames';\n\nimport { CalculatedColumn, Filters } from './common/types';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, never, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\nexport interface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  lastFrozenColumnIndex: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  lastFrozenColumnIndex,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div className=\"rdg-filter-row\">\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = classNames('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && createElement(column.filterRenderer, {\n              column,\n              value: filters?.[column.key],\n              onChange: value => onChange(key, value)\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n"]}