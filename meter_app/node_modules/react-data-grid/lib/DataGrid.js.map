{"version":3,"file":"DataGrid.js","sourceRoot":"","sources":["../src/DataGrid.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EACZ,UAAU,EACV,QAAQ,EACR,MAAM,EACN,OAAO,EACP,eAAe,EACf,SAAS,EACT,mBAAmB,EACnB,WAAW,EACX,aAAa,EACd,MAAM,OAAO,CAAC;AAEf,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,gBAAgB,MAAM,0BAA0B,CAAC;AACxD,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAC9C,OAAO,EACL,gBAAgB,EAChB,gBAAgB,EAChB,uBAAuB,EACvB,0BAA0B,EAC1B,gBAAgB,EAChB,wBAAwB,EACxB,kBAAkB,EACnB,MAAM,SAAS,CAAC;AAajB,OAAO,EAAE,kBAAkB,EAAiB,MAAM,gBAAgB,CAAC;AAwGnE;;;;;;EAME;AACF,SAAS,QAAQ,CAA2B;AAC1C,sBAAsB;AACtB,OAAO,EAAE,UAAU,EACnB,IAAI,EACJ,WAAW,EACX,MAAM,EACN,YAAY;AACZ,mBAAmB;AACnB,KAAK,EACL,MAAM,GAAG,GAAG,EACZ,cAAc,GAAG,EAAE,EACnB,SAAS,GAAG,EAAE,EACd,eAAe,GAAG,SAAS,EAC3B,mBAAmB,GAAG,EAAE;AACxB,gBAAgB;AAChB,YAAY,EACZ,oBAAoB,EACpB,UAAU,EACV,aAAa,EACb,MAAM,EACN,OAAO,EACP,eAAe;AACf,mBAAmB;AACnB,gBAAgB,GAAG,cAAc,EACjC,WAAW,EAAE,WAAW,GAAG,GAAG,EAC9B,iBAAiB;AACjB,cAAc;AACd,UAAU,EACV,QAAQ,EACR,cAAc,EACd,oBAAoB,EACpB,qBAAqB;AACrB,oBAAoB;AACpB,aAAa,GAAG,KAAK,EACrB,mBAAmB,GAAG,IAAI,EAC1B,mBAAmB,GAAG,KAAK,EAC3B,qBAAqB,GAAG,KAAK,EAC7B,kBAAkB,GAAG,kBAAkB,CAAC,IAAI;AAC5C,gBAAgB;AAChB,kBAAkB,GAAG,QAAQ,CAAC,IAAI,EACV,EAAE,GAA8B;;IACxD;;SAEK;IACL,MAAM,OAAO,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC7C,MAAM,kBAAkB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtC;;OAEG;IACH,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC;IAClD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAA8B,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAE/F;;OAEG;IACH,MAAM,aAAa,GAAG,CAAC,KAAK,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,sBAAsB;IAEtE,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE;QACxE,OAAO,gBAAgB,CAAQ;YAC7B,OAAO,EAAE,UAAU;YACnB,cAAc;YACd,aAAa;YACb,YAAY;YACZ,gBAAgB;SACjB,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC;IAEhF,MAAM,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAqB,EAAE;QAC9E,OAAO,0BAA0B,CAC/B,OAAO,EACP,qBAAqB,EACrB,aAAa,EACb,UAAU,CACX,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,qBAAqB,EAAE,aAAa,CAAC,CAAC,CAAC;IAEhE,MAAM,eAAe,GAAG,OAAO,CAAC,GAAuC,EAAE;QACvE,OAAO,kBAAkB,CACvB,OAAO,EACP,mBAAmB,EACnB,iBAAiB,CAClB,CAAC;IACJ,CAAC,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,OAAO,CAAC,CAAC,CAAC;IAEtD,MAAM,iBAAiB,GAAG,eAAe,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtF,MAAM,YAAY,GAAG,MAAM;UACvB,CAAC,CAAC,eAAe;UACjB,iBAAiB;UACjB,OAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,mCAAI,CAAC,CAAC,GAAG,SAAS;UACtC,CAAC,gBAAgB,GAAG,aAAa,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhE,MAAM,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,GAAG,wBAAwB,CACvE,YAAY,EACZ,SAAS,EACT,SAAS,EACT,IAAI,CAAC,MAAM,CACZ,CAAC;IAEF;;OAEG;IACH,eAAe,CAAC,GAAG,EAAE;QACnB,kDAAkD;QAClD,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,OAAO;QACtC,SAAS,QAAQ;YACf,kFAAkF;YAClF,YAAY,CAAC,OAAO,CAAC,OAAQ,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC;QACD,QAAQ,EAAE,CAAC;QAEX,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC5C,OAAO,GAAG,EAAE;YACV,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,oBAAoB;YAAE,OAAO;QAElC,MAAM,wBAAwB,GAAG,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAkB,EAAE,EAAE;YACrF,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACzB,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;YAEnC,IAAI,OAAO,EAAE;gBACX,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC3B,MAAM,cAAc,GAAG,kBAAkB,CAAC,OAAO,CAAC;gBAClD,kBAAkB,CAAC,OAAO,GAAG,MAAM,CAAC;gBACpC,IAAI,YAAY,IAAI,cAAc,KAAK,CAAC,CAAC,IAAI,cAAc,KAAK,MAAM,EAAE;oBACtE,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC;oBAChD,KAAK,IAAI,CAAC,GAAG,cAAc,GAAG,IAAI,EAAE,CAAC,KAAK,MAAM,EAAE,CAAC,IAAI,IAAI,EAAE;wBAC3D,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;qBACtC;iBACF;aACF;iBAAM;gBACL,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,kBAAkB,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;aACjC;YAED,oBAAoB,CAAC,eAAe,CAAC,CAAC;QACxC,CAAC,CAAC;QAEF,OAAO,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;IACpE,CAAC,EAAE,CAAC,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;IAEjE,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC9B,cAAc,CAAC,GAAW;YACxB,YAAY,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACxB,CAAC;QACD,WAAW,CAAC,MAAc;YACxB,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;YAC5B,IAAI,CAAC,OAAO;gBAAE,OAAO;YACrB,OAAO,CAAC,SAAS,GAAG,MAAM,GAAG,SAAS,CAAC;QACzC,CAAC;QACD,UAAU,CAAC,QAAkB,EAAE,UAAoB;YACjD,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACzD,CAAC;KACF,CAAC,CAAC,CAAC;IAEJ;;OAEG;IACH,SAAS,YAAY,CAAC,KAAoC;QACxD,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC;QACtD,YAAY,CAAC,SAAS,CAAC,CAAC;QACxB,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1B,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,KAAK,EAAE;IACpB,CAAC;IAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,CAAC,MAA+B,EAAE,KAAa,EAAE,EAAE;QACxF,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;QAC9C,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACvC,eAAe,CAAC,eAAe,CAAC,CAAC;QAEjC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE;IACtC,CAAC,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,CAAC;IAEnC,SAAS,gBAAgB,CAAC,KAAsB;QAC9C,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,KAAK,EAAE;IACxB,CAAC;IAED;;OAEG;IACH,SAAS,qBAAqB;QAC5B,IAAI,qBAAqB,KAAK,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC;QAC3C,MAAM,aAAa,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACrD,OAAO,aAAa,CAAC,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC;IAClD,CAAC;IAED,SAAS,YAAY,CAAC,EAAE,GAAG,EAAE,MAAM,EAAqB;QACtD,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,OAAO;YAAE,OAAO;QAErB,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,qBAAqB,EAAE;YAC1D,MAAM,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;YAChC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YACrC,MAAM,oBAAoB,GAAG,IAAI,GAAG,UAAU,GAAG,KAAK,GAAG,qBAAqB,EAAE,CAAC;YACjF,MAAM,qBAAqB,GAAG,IAAI,GAAG,KAAK,GAAG,WAAW,GAAG,UAAU,CAAC;YACtE,IAAI,oBAAoB,IAAI,qBAAqB,EAAE;gBACjD,MAAM,aAAa,GAAG,uBAAuB,CAAC,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;gBACrF,OAAO,CAAC,UAAU,GAAG,UAAU,GAAG,aAAa,CAAC;aACjD;SACF;QAED,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,IAAI,MAAM,GAAG,SAAS,GAAG,SAAS,EAAE;gBAClC,2CAA2C;gBAC3C,OAAO,CAAC,SAAS,GAAG,MAAM,GAAG,SAAS,CAAC;aACxC;iBAAM,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,SAAS,GAAG,YAAY,EAAE;gBAC9D,8EAA8E;gBAC9E,OAAO,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,YAAY,CAAC;aAC7D;SACF;IACH,CAAC;IAED,SAAS,eAAe;;QACtB,MAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,KAAK,IAAI,MAAM,GAAG,mBAAmB,EAAE,MAAM,IAAI,iBAAiB,EAAE,MAAM,EAAE,EAAE;YAC5E,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,IAAI,GAAG,GAAoB,MAAM,CAAC;YAClC,IAAI,aAAa,GAAG,KAAK,CAAC;YAC1B,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC1B,aAAa,SAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,GAAG,CAAC,KAAK,oCAAK,KAAK,CAAC;gBAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC1D,GAAG,GAAG,KAAK,CAAC;iBACb;aACF;YAED,WAAW,CAAC,IAAI,CACd,oBAAC,WAAW,IACV,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,eAAe,EAAE,eAAe,EAChC,qBAAqB,EAAE,qBAAqB,EAC5C,QAAQ,EAAE,QAAQ,EAClB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,UAAU,GACtB,CACH,CAAC;SACH;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,OAAO,CACL,6BACE,SAAS,EAAC,KAAK,EACf,KAAK,EAAE;YACL,KAAK;YACL,MAAM;YACN,qBAAqB,EAAE,GAAG,eAAe,IAAI;YAC7C,qBAAqB,EAAE,GAAG,mBAAmB,IAAI;YACjD,aAAa,EAAE,GAAG,gBAAgB,IAAI;YACtC,cAAc,EAAE,GAAG,SAAS,IAAI;SACV,EACxB,GAAG,EAAE,OAAO,EACZ,QAAQ,EAAE,YAAY;QAEtB,oBAAC,SAAS,IACR,MAAM,EAAE,MAAM,EACd,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,eAAe,EACxB,cAAc,EAAE,kBAAkB,EAClC,qBAAqB,EAAE,qBAAqB,EAC5C,eAAe,EAAE,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,MAAK,IAAI,CAAC,MAAM,EACnD,oBAAoB,EAAE,oBAAoB,EAC1C,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,aAAa,EAC5B,MAAM,EAAE,MAAM,GACd;QACD,aAAa,IAAI,CAChB,oBAAC,SAAS,IACR,qBAAqB,EAAE,qBAAqB,EAC5C,OAAO,EAAE,eAAe,EACxB,OAAO,EAAE,OAAO,EAChB,eAAe,EAAE,eAAe,GAChC,CACH;QACA,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAC3E;YACG,aAAa,GAAG,CAAC,IAAI,CACpB,oBAAC,gBAAgB,IACf,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,EAChB,mBAAmB,EAAE,mBAAmB,EACxC,mBAAmB,EAAE,mBAAmB,EACxC,qBAAqB,EAAE,qBAAqB,EAC5C,kBAAkB,EAAE,kBAAkB,EACtC,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO,EAChB,iBAAiB,EAAE,iBAAiB,EACpC,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,YAAY,EAC1B,kBAAkB,EAAE,kBAAkB,EACtC,qBAAqB,EAAE,qBAAqB,EAC5C,YAAY,EAAE,gBAAgB,EAC9B,oBAAoB,EAAE,oBAAoB,GAC1C,CACH;YACD,6BAAK,KAAK,EAAE,EAAE,MAAM,EAAE,mBAAmB,GAAG,SAAS,EAAE,GAAI;YAC1D,eAAe,EAAE;YAClB,6BAAK,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,iBAAiB,CAAC,GAAG,SAAS,EAAE,GAAI,EAC5E,WAAW,aAAX,WAAW;YAAX,WAAW,CAAE,GAAG,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CACjC,oBAAC,UAAU,IACT,GAAG,EAAE,MAAM,EACX,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,SAAS,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,EACrD,eAAe,EAAE,eAAe,EAChC,qBAAqB,EAAE,qBAAqB,GAC5C,CACH,EACA,CACJ,CACG,CACP,CAAC;AACJ,CAAC;AAED,eAAe,UAAU,CACvB,QAAwD,CACoE,CAAC","sourcesContent":["import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useMemo,\n  useLayoutEffect,\n  useEffect,\n  useImperativeHandle,\n  useCallback,\n  createElement\n} from 'react';\n\nimport EventBus from './EventBus';\nimport InteractionMasks from './masks/InteractionMasks';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport SummaryRow from './SummaryRow';\nimport { ValueFormatter } from './formatters';\nimport {\n  assertIsValidKey,\n  getColumnMetrics,\n  getColumnScrollPosition,\n  getHorizontalRangeToRender,\n  getScrollbarSize,\n  getVerticalRangeToRender,\n  getViewportColumns\n} from './utils';\n\nimport {\n  CalculatedColumn,\n  CheckCellIsEditableEvent,\n  Column,\n  Filters,\n  FormatterProps,\n  Position,\n  RowRendererProps,\n  RowsUpdateEvent,\n  SelectRowEvent\n} from './common/types';\nimport { CellNavigationMode, SortDirection } from './common/enums';\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\nexport interface DataGridProps<R, K extends keyof R, SR = unknown> {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The primary key property of each row */\n  rowKey?: K;\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onRowsUpdate?: <E extends RowsUpdateEvent>(event: E) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The width of the grid in pixels */\n  width?: number;\n  /** The height of the grid in pixels */\n  height?: number;\n  /** Minimum column width in pixels */\n  minColumnWidth?: number;\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<R[K]>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<R[K]>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n\n  /**\n   * Custom renderers\n   */\n  defaultFormatter?: React.ComponentType<FormatterProps<R, SR>>;\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType<{}>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?: (event: CheckCellIsEditableEvent<R, SR>) => boolean;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilters?: boolean;\n  /** Toggles whether cells should be autofocused */\n  enableCellAutoFocus?: boolean;\n  enableCellCopyPaste?: boolean;\n  enableCellDragAndDrop?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, K extends keyof R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows,\n  summaryRows,\n  rowKey,\n  onRowsUpdate,\n  // Dimensions props\n  width,\n  height = 350,\n  minColumnWidth = 80,\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  // Custom renderers\n  defaultFormatter = ValueFormatter,\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onCheckCellIsEditable,\n  // Toggles and modes\n  enableFilters = false,\n  enableCellAutoFocus = true,\n  enableCellCopyPaste = false,\n  enableCellDragAndDrop = false,\n  cellNavigationMode = CellNavigationMode.NONE,\n  // Miscellaneous\n  editorPortalTarget = document.body\n}: DataGridProps<R, K, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * refs\n   * */\n  const gridRef = useRef<HTMLDivElement>(null);\n  const lastSelectedRowIdx = useRef(-1);\n\n  /**\n   * states\n   */\n  const [eventBus] = useState(() => new EventBus());\n  const [gridWidth, setGridWidth] = useState(0);\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n\n  /**\n   * computed values\n   */\n  const viewportWidth = (width || gridWidth) - 2; // 2 for border width;\n\n  const { columns, lastFrozenColumnIndex, totalColumnWidth } = useMemo(() => {\n    return getColumnMetrics<R, SR>({\n      columns: rawColumns,\n      minColumnWidth,\n      viewportWidth,\n      columnWidths,\n      defaultFormatter\n    });\n  }, [columnWidths, rawColumns, defaultFormatter, minColumnWidth, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    return getHorizontalRangeToRender(\n      columns,\n      lastFrozenColumnIndex,\n      viewportWidth,\n      scrollLeft\n    );\n  }, [scrollLeft, columns, lastFrozenColumnIndex, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return getViewportColumns(\n      columns,\n      colOverscanStartIdx,\n      colOverscanEndIdx\n    );\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  const totalHeaderHeight = headerRowHeight + (enableFilters ? headerFiltersHeight : 0);\n  const clientHeight = height\n    - 2 // border width\n    - totalHeaderHeight\n    - (summaryRows?.length ?? 0) * rowHeight\n    - (totalColumnWidth > viewportWidth ? getScrollbarSize() : 0);\n\n  const [rowOverscanStartIdx, rowOverscanEndIdx] = getVerticalRangeToRender(\n    clientHeight,\n    rowHeight,\n    scrollTop,\n    rows.length\n  );\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    // Do not calculate the width if width is provided\n    if (typeof width === 'number') return;\n    function onResize() {\n      // Immediately re-render when the component is mounted to get valid columnMetrics.\n      setGridWidth(gridRef.current!.getBoundingClientRect().width);\n    }\n    onResize();\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [width]);\n\n  useEffect(() => {\n    if (!onSelectedRowsChange) return;\n\n    const handleRowSelectionChange = ({ rowIdx, checked, isShiftClick }: SelectRowEvent) => {\n      assertIsValidKey(rowKey);\n      const newSelectedRows = new Set(selectedRows);\n      const rowId = rows[rowIdx][rowKey];\n\n      if (checked) {\n        newSelectedRows.add(rowId);\n        const previousRowIdx = lastSelectedRowIdx.current;\n        lastSelectedRowIdx.current = rowIdx;\n        if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n          const step = Math.sign(rowIdx - previousRowIdx);\n          for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n            newSelectedRows.add(rows[i][rowKey]);\n          }\n        }\n      } else {\n        newSelectedRows.delete(rowId);\n        lastSelectedRowIdx.current = -1;\n      }\n\n      onSelectedRowsChange(newSelectedRows);\n    };\n\n    return eventBus.subscribe('SELECT_ROW', handleRowSelectionChange);\n  }, [eventBus, onSelectedRowsChange, rows, rowKey, selectedRows]);\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTop = rowIdx * rowHeight;\n    },\n    selectCell(position: Position, openEditor?: boolean) {\n      eventBus.dispatch('SELECT_CELL', position, openEditor);\n    }\n  }));\n\n  /**\n   * event handlers\n   */\n  function onGridScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width);\n  }, [columnWidths, onColumnResize]);\n\n  function handleRowsUpdate(event: RowsUpdateEvent) {\n    onRowsUpdate?.(event);\n  }\n\n  /**\n   * utils\n   */\n  function getFrozenColumnsWidth() {\n    if (lastFrozenColumnIndex === -1) return 0;\n    const lastFrozenCol = columns[lastFrozenColumnIndex];\n    return lastFrozenCol.left + lastFrozenCol.width;\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>) {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + getFrozenColumnsWidth();\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      let key: string | number = rowIdx;\n      let isRowSelected = false;\n      if (rowKey !== undefined) {\n        const rowId = row[rowKey];\n        isRowSelected = selectedRows?.has(rowId) ?? false;\n        if (typeof rowId === 'string' || typeof rowId === 'number') {\n          key = rowId;\n        }\n      }\n\n      rowElements.push(\n        <RowRenderer\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          eventBus={eventBus}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  return (\n    <div\n      className=\"rdg\"\n      style={{\n        width,\n        height,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`\n      } as React.CSSProperties}\n      ref={gridRef}\n      onScroll={onGridScroll}\n    >\n      <HeaderRow<R, K, SR>\n        rowKey={rowKey}\n        rows={rows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n        allRowsSelected={selectedRows?.size === rows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilters && (\n        <FilterRow<R, SR>\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && emptyRowsRenderer ? createElement(emptyRowsRenderer) : (\n        <>\n          {viewportWidth > 0 && (\n            <InteractionMasks<R, SR>\n              rows={rows}\n              rowHeight={rowHeight}\n              columns={columns}\n              enableCellAutoFocus={enableCellAutoFocus}\n              enableCellCopyPaste={enableCellCopyPaste}\n              enableCellDragAndDrop={enableCellDragAndDrop}\n              cellNavigationMode={cellNavigationMode}\n              eventBus={eventBus}\n              gridRef={gridRef}\n              totalHeaderHeight={totalHeaderHeight}\n              scrollLeft={scrollLeft}\n              scrollTop={scrollTop}\n              scrollToCell={scrollToCell}\n              editorPortalTarget={editorPortalTarget}\n              onCheckCellIsEditable={onCheckCellIsEditable}\n              onRowsUpdate={handleRowsUpdate}\n              onSelectedCellChange={onSelectedCellChange}\n            />\n          )}\n          <div style={{ height: rowOverscanStartIdx * rowHeight }} />\n          {getViewportRows()}\n          <div style={{ height: (rows.length - 1 - rowOverscanEndIdx) * rowHeight }} />\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(\n  DataGrid as React.RefForwardingComponent<DataGridHandle>\n) as <R, K extends keyof R, SR = unknown>(props: DataGridProps<R, K, SR> & { ref?: React.Ref<DataGridHandle> }) => JSX.Element;\n"]}