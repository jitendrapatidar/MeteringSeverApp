{"version":3,"file":"Cell.js","sourceRoot":"","sources":["../src/Cell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAChD,OAAO,UAAU,MAAM,YAAY,CAAC;AAGpC,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEpD,SAAS,IAAI,CAAQ,EACnB,SAAS,EACT,MAAM,EACN,aAAa,EACb,qBAAqB,EACrB,GAAG,EACH,MAAM,EACN,QAAQ,EACR,UAAU,EACV,OAAO,EACP,aAAa,EACb,aAAa,EACb,UAAU,EACV,GAAG,KAAK,EACiB,EAAE,GAA8B;IACzD,SAAS,UAAU,CAAC,UAAoB;QACtC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;IAED,SAAS,eAAe;QACtB,UAAU,EAAE,CAAC;QACb,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;IACpC,CAAC;IAED,SAAS,qBAAqB;QAC5B,UAAU,EAAE,CAAC;IACf,CAAC;IAED,SAAS,qBAAqB;QAC5B,UAAU,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;IAED,SAAS,oBAAoB,CAAC,OAAgB,EAAE,YAAqB;QACnE,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;IAC7B,SAAS,GAAG,UAAU,CACpB,UAAU,EACV;QACE,iBAAiB,EAAE,MAAM,CAAC,MAAM;QAChC,sBAAsB,EAAE,MAAM,CAAC,GAAG,KAAK,qBAAqB;KAC7D,EACD,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,EAC5D,SAAS,CACV,CAAC;IAEF,OAAO,CACL,2CACE,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE;YACL,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,EACD,OAAO,EAAE,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC,EAC5C,aAAa,EAAE,SAAS,CAAC,qBAAqB,EAAE,aAAa,CAAC,EAC9D,aAAa,EAAE,SAAS,CAAC,qBAAqB,EAAE,aAAa,CAAC,EAC9D,UAAU,EAAE,SAAS,CAAC,cAAc,EAAE,UAAU,CAAC,IAC7C,KAAK;QAET,oBAAC,MAAM,CAAC,SAAS,IACf,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,GAAG,EACR,aAAa,EAAE,aAAa,EAC5B,oBAAoB,EAAE,oBAAoB,GAC1C,CACE,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAsE,CAAC","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport classNames from 'classnames';\n\nimport { CellRendererProps } from './common/types';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  row,\n  rowIdx,\n  eventBus,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onDragOver,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function selectCell(openEditor?: boolean) {\n    eventBus.dispatch('SELECT_CELL', { idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleCellClick() {\n    selectCell();\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleCellContextMenu() {\n    selectCell();\n  }\n\n  function handleCellDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    eventBus.dispatch('SELECT_ROW', { rowIdx, checked, isShiftClick });\n  }\n\n  const { cellClass } = column;\n  className = classNames(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onClick={wrapEvent(handleCellClick, onClick)}\n      onDoubleClick={wrapEvent(handleCellDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleCellContextMenu, onContextMenu)}\n      onDragOver={wrapEvent(preventDefault, onDragOver)}\n      {...props}\n    >\n      <column.formatter\n        column={column}\n        rowIdx={rowIdx}\n        row={row}\n        isRowSelected={isRowSelected}\n        onRowSelectionChange={onRowSelectionChange}\n      />\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR>) => JSX.Element;\n"]}