{"version":3,"file":"EditorPortal.js","sourceRoot":"","sources":["../../src/editors/EditorPortal.tsx"],"names":[],"mappings":"AAAA,OAAc,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,QAAQ,MAAM,WAAW,CAAC;AAOjC,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAS;IAC9D,2DAA2D;IAC3D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAElD,eAAe,CAAC,GAAG,EAAE;QACnB,YAAY,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,2DAA2D;IAC3D,2CAA2C;IAC3C,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IAED,OAAO,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface Props {\n  children: React.ReactNode;\n  target: Element;\n}\n\nexport default function EditorPortal({ target, children }: Props) {\n  // Keep track of when the modal element is added to the DOM\n  const [isMounted, setIsMounted] = useState(false);\n\n  useLayoutEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // Don't render the portal until the component has mounted,\n  // So the portal can safely access the DOM.\n  if (!isMounted) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, target);\n}\n"]}