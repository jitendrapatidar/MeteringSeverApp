{"ast":null,"code":"import React, { useCallback, memo } from 'react';\nimport HeaderCell from './HeaderCell';\nimport { assertIsValidKey } from './utils';\n\nfunction HeaderRow({\n  columns,\n  lastFrozenColumnIndex,\n  rows,\n  rowKey,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}) {\n  const handleAllRowsSelectionChange = useCallback(checked => {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKey(rowKey);\n    const newSelectedRows = new Set();\n\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(row[rowKey]);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKey]);\n  return React.createElement(\"div\", {\n    className: \"rdg-header-row\"\n  }, columns.map(column => {\n    return React.createElement(HeaderCell, {\n      key: column.key,\n      column: column,\n      lastFrozenColumnIndex: lastFrozenColumnIndex,\n      onResize: onColumnResize,\n      allRowsSelected: allRowsSelected,\n      onAllRowsSelectionChange: handleAllRowsSelectionChange,\n      onSort: onSort,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection\n    });\n  }));\n}\n\nexport default memo(HeaderRow);","map":{"version":3,"sources":["../src/HeaderRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,WAAhB,EAA6B,IAA7B,QAAyC,OAAzC;AAEA,OAAO,UAAP,MAAuB,cAAvB;AAEA,SAAS,gBAAT,QAAiC,SAAjC;;AAmBA,SAAS,SAAT,CAA6C;AAC3C,EAAA,OAD2C;AAE3C,EAAA,qBAF2C;AAG3C,EAAA,IAH2C;AAI3C,EAAA,MAJ2C;AAK3C,EAAA,oBAL2C;AAM3C,EAAA,eAN2C;AAO3C,EAAA,cAP2C;AAQ3C,EAAA,UAR2C;AAS3C,EAAA,aAT2C;AAU3C,EAAA;AAV2C,CAA7C,EAW2B;AACzB,QAAM,4BAA4B,GAAG,WAAW,CAAE,OAAD,IAAqB;AACpE,QAAI,CAAC,oBAAL,EAA2B;AAE3B,IAAA,gBAAgB,CAAC,MAAD,CAAhB;AAEA,UAAM,eAAe,GAAG,IAAI,GAAJ,EAAxB;;AACA,QAAI,OAAJ,EAAa;AACX,WAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,QAAA,eAAe,CAAC,GAAhB,CAAoB,GAAG,CAAC,MAAD,CAAvB;AACD;AACF;;AAED,IAAA,oBAAoB,CAAC,eAAD,CAApB;AACD,GAb+C,EAa7C,CAAC,oBAAD,EAAuB,IAAvB,EAA6B,MAA7B,CAb6C,CAAhD;AAeA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACG,OAAO,CAAC,GAAR,CAAY,MAAM,IAAG;AACpB,WACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,MAAA,GAAG,EAAE,MAAM,CAAC,GADH;AAET,MAAA,MAAM,EAAE,MAFC;AAGT,MAAA,qBAAqB,EAAE,qBAHd;AAIT,MAAA,QAAQ,EAAE,cAJD;AAKT,MAAA,eAAe,EAAE,eALR;AAMT,MAAA,wBAAwB,EAAE,4BANjB;AAOT,MAAA,MAAM,EAAE,MAPC;AAQT,MAAA,UAAU,EAAE,UARH;AAST,MAAA,aAAa,EAAE;AATN,KAAX,CADF;AAaD,GAdA,CADH,CADF;AAmBD;;AAED,eAAe,IAAI,CAAC,SAAD,CAAnB","sourcesContent":["import React, { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport { CalculatedColumn } from './common/types';\nimport { assertIsValidKey } from './utils';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> = Pick<DataGridProps<R, K, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKey'\n>;\n\nexport interface HeaderRowProps<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  lastFrozenColumnIndex: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, K extends keyof R, SR>({\n  columns,\n  lastFrozenColumnIndex,\n  rows,\n  rowKey,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, K, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKey(rowKey);\n\n    const newSelectedRows = new Set<R[K]>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(row[rowKey]);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKey]);\n\n  return (\n    <div className=\"rdg-header-row\">\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            lastFrozenColumnIndex={lastFrozenColumnIndex}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, K extends keyof R, SR>(props: HeaderRowProps<R, K, SR>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}