{"ast":null,"code":"import React, { cloneElement } from 'react';\nexport default function ResizableHeaderCell({\n  children,\n  column,\n  onResize\n}) {\n  function onMouseDown(event) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    const {\n      currentTarget\n    } = event;\n    const {\n      right\n    } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    const onMouseMove = event => {\n      handleResize(event.clientX + offset, currentTarget);\n    };\n\n    const onMouseUp = () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    event.preventDefault();\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n  }\n\n  function onTouchStart(event) {\n    const touch = event.changedTouches[0];\n    const {\n      identifier\n    } = touch;\n    const {\n      currentTarget\n    } = event;\n    const {\n      right\n    } = currentTarget.getBoundingClientRect();\n    const offset = right - touch.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function getTouch(event) {\n      for (const touch of event.changedTouches) {\n        if (touch.identifier === identifier) return touch;\n      }\n\n      return null;\n    }\n\n    const onTouchMove = event => {\n      const touch = getTouch(event);\n\n      if (touch) {\n        handleResize(touch.clientX + offset, currentTarget);\n      }\n    };\n\n    const onTouchEnd = event => {\n      const touch = getTouch(event);\n      if (!touch) return;\n      window.removeEventListener('touchmove', onTouchMove);\n      window.removeEventListener('touchend', onTouchEnd);\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n  }\n\n  function handleResize(x, target) {\n    const width = x - target.getBoundingClientRect().left;\n\n    if (width > 0) {\n      onResize(column, width);\n    }\n  }\n\n  return cloneElement(children, {\n    onMouseDown,\n    onTouchStart,\n    children: React.createElement(React.Fragment, null, children.props.children, React.createElement(\"div\", {\n      className: \"rdg-header-cell-resizer\"\n    }))\n  });\n}","map":{"version":3,"sources":["../../src/headerCells/ResizableHeaderCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { cloneElement } from 'react';\nimport { CalculatedColumn } from '../common/types';\n\nexport interface ResizableHeaderCellProps<R, SR> {\n  children: React.ReactElement<React.ComponentProps<'div'>>;\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nexport default function ResizableHeaderCell<R, SR>({\n  children,\n  column,\n  onResize\n}: ResizableHeaderCellProps<R, SR>) {\n  function onMouseDown(event: React.MouseEvent) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    const { currentTarget } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    const onMouseMove = (event: MouseEvent) => {\n      handleResize(event.clientX + offset, currentTarget);\n    };\n\n    const onMouseUp = () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    event.preventDefault();\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n  }\n\n  function onTouchStart(event: React.TouchEvent) {\n    const touch = event.changedTouches[0];\n    const { identifier } = touch;\n    const { currentTarget } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - touch.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function getTouch(event: TouchEvent) {\n      for (const touch of event.changedTouches) {\n        if (touch.identifier === identifier) return touch;\n      }\n      return null;\n    }\n\n    const onTouchMove = (event: TouchEvent) => {\n      const touch = getTouch(event);\n      if (touch) {\n        handleResize(touch.clientX + offset, currentTarget);\n      }\n    };\n\n    const onTouchEnd = (event: TouchEvent) => {\n      const touch = getTouch(event);\n      if (!touch) return;\n      window.removeEventListener('touchmove', onTouchMove);\n      window.removeEventListener('touchend', onTouchEnd);\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n  }\n\n  function handleResize(x: number, target: Element) {\n    const width = x - target.getBoundingClientRect().left;\n    if (width > 0) {\n      onResize(column, width);\n    }\n  }\n\n  return cloneElement(children, {\n    onMouseDown,\n    onTouchStart,\n    children: (\n      <>\n        {children.props.children}\n        <div className=\"rdg-header-cell-resizer\" />\n      </>\n    )\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}