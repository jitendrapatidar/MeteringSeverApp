{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\";\nimport { Line } from 'react-chartjs-2';\nimport DataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  const [MeterGraph, setMeterGraph] = useState(\"\");\n  const [Metering, setMetering] = useState(\"\");\n  const MeterGraph_2 = {\n    labels: [\"21/03/2020 10:30 PM\", \"21/03/2020 11:00 PM\", \"21/03/2020 11:30 PM\", \"22/03/2020 12:00 AM\", \"22/03/2020 12:30 AM\", \"22/03/2020 1:00 AM\", \"22/03/2020 1:30 AM\", \"22/03/2020 2:00 AM\", \"22/03/2020 2:30 AM\", \"22/03/2020 3:00 AM\", \"22/03/2020 3:30 AM\", \"22/03/2020 4:00 AM\", \"22/03/2020 4:30 AM\", \"22/03/2020 5:00 AM\", \"22/03/2020 5:30 AM\", \"22/03/2020 6:00 AM\", \"22/03/2020 6:30 AM\", \"22/03/2020 7:00 AM\", \"22/03/2020 7:30 AM\", \"22/03/2020 8:00 AM\", \"22/03/2020 8:30 AM\", \"22/03/2020 9:00 AM\", \"22/03/2020 9:30 AM\", \"22/03/2020 10:00 AM\", \"22/03/2020 10:30 AM\", \"22/03/2020 11:00 AM\", \"22/03/2020 11:30 AM\", \"22/03/2020 12:00 PM\", \"22/03/2020 12:30 PM\", \"22/03/2020 1:00 PM\", \"22/03/2020 1:30 PM\", \"22/03/2020 2:00 PM\", \"22/03/2020 2:30 PM\", \"22/03/2020 3:00 PM\", \"22/03/2020 3:30 PM\", \"22/03/2020 4:00 PM\", \"22/03/2020 4:30 PM\", \"22/03/2020 5:00 PM\", \"22/03/2020 5:30 PM\", \"22/03/2020 6:00 PM\", \"22/03/2020 6:30 PM\", \"22/03/2020 7:00 PM\", \"22/03/2020 7:30 PM\", \"22/03/2020 8:00 PM\", \"22/03/2020 8:30 PM\", \"22/03/2020 9:00 PM\", \"22/03/2020 9:30 PM\", \"22/03/2020 10:00 PM\", \"22/03/2020 10:30 PM\", \"22/03/2020 11:00 PM\", \"22/03/2020 11:30 PM\", \"23/03/2020 12:00 AM\", \"23/03/2020 12:30 AM\", \"23/03/2020 1:00 AM\", \"23/03/2020 1:30 AM\", \"23/03/2020 2:00 AM\", \"23/03/2020 2:30 AM\", \"23/03/2020 3:00 AM\", \"23/03/2020 3:30 AM\", \"23/03/2020 4:00 AM\", \"23/03/2020 4:30 AM\", \"23/03/2020 5:00 AM\", \"23/03/2020 5:30 AM\", \"23/03/2020 6:00 AM\", \"23/03/2020 6:30 AM\", \"23/03/2020 7:00 AM\", \"23/03/2020 7:30 AM\", \"23/03/2020 8:00 AM\", \"23/03/2020 8:30 AM\", \"23/03/2020 9:00 AM\", \"23/03/2020 9:30 AM\", \"23/03/2020 10:00 AM\", \"23/03/2020 10:30 AM\", \"23/03/2020 11:00 AM\", \"23/03/2020 11:30 AM\", \"23/03/2020 12:00 PM\", \"23/03/2020 12:30 PM\", \"23/03/2020 1:00 PM\", \"23/03/2020 1:30 PM\", \"23/03/2020 2:00 PM\", \"23/03/2020 2:30 PM\", \"23/03/2020 3:00 PM\", \"23/03/2020 3:30 PM\", \"23/03/2020 4:00 PM\", \"23/03/2020 4:30 PM\", \"23/03/2020 5:00 PM\", \"23/03/2020 5:30 PM\", \"23/03/2020 6:00 PM\", \"23/03/2020 6:30 PM\", \"23/03/2020 7:00 PM\", \"23/03/2020 7:30 PM\", \"23/03/2020 8:00 PM\", \"23/03/2020 8:30 PM\", \"23/03/2020 9:00 PM\", \"23/03/2020 9:30 PM\", \"23/03/2020 10:00 PM\", \"23/03/2020 10:30 PM\", \"23/03/2020 11:00 PM\", \"23/03/2020 11:30 PM\", \"24/03/2020 12:00 AM\"],\n    datasets: [{\n      label: \"WH\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [27180198, 27180301, 27180403, 27180506, 27180608, 27180710, 27180812, 27180913, 27181012, 27181112, 27181214, 27181378, 27181507, 27181639, 27181783, 27181932, 27182092, 27182342, 27182700, 27183092, 27183472, 27183853, 27184245, 27184642, 27185030, 27185423, 27185759, 27186042, 27186278, 27186470, 27186646, 27186804, 27186940, 27187075, 27187218, 27187357, 27187485, 27187610, 27187733, 27187845, 27187951, 27188056, 27188162, 27188267, 27188373, 27188478, 27188583, 27188686, 27188792, 27188895, 27188999, 27189103, 27189209, 27189314, 27189420, 27189522, 27189623, 27189725, 27189830, 27189991, 27190128, 27190253, 27190398, 27190563, 27190814, 27191124, 27191518, 27191896, 27192274, 27192666, 27193064, 27193474, 27193909, 27194323, 27194719, 27195118, 27195519, 27195920, 27196295, 27196674, 27197054, 27197457, 27197835, 27198173, 27198395, 27198543, 27198666, 27198791, 27198901, 27199006, 27199111, 27199214, 27199320, 27199424, 27199527, 27199631, 27199736, 27199841, 27199943, 27200046]\n    }, {\n      label: \"VARH\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [6232597, 6232642, 6232686, 6232731, 6232776, 6232820, 6232865, 6232912, 6232957, 6233000, 6233042, 6233085, 6233131, 6233178, 6233226, 6233275, 6233325, 6233391, 6233473, 6233554, 6233631, 6233704, 6233779, 6233850, 6233913, 6233993, 6234080, 6234152, 6234211, 6234266, 6234321, 6234375, 6234419, 6234464, 6234507, 6234550, 6234590, 6234633, 6234677, 6234723, 6234768, 6234811, 6234855, 6234899, 6234943, 6234987, 6235029, 6235069, 6235112, 6235155, 6235198, 6235242, 6235287, 6235330, 6235371, 6235414, 6235455, 6235499, 6235546, 6235589, 6235631, 6235676, 6235723, 6235772, 6235824, 6235889, 6235967, 6236040, 6236112, 6236189, 6236265, 6236327, 6236394, 6236464, 6236538, 6236610, 6236683, 6236747, 6236814, 6236882, 6236950, 6237006, 6237079, 6237156, 6237231, 6237287, 6237329, 6237373, 6237418, 6237459, 6237503, 6237547, 6237593, 6237637, 6237680, 6237719, 6237760, 6237803, 6237846, 6237890]\n    }]\n  };\n  const columns = [{\n    key: 'id',\n    name: 'ID'\n  }, {\n    key: 'title',\n    name: 'Title'\n  }];\n  const rows = [{\n    id: 0,\n    title: 'Example'\n  }, {\n    id: 1,\n    title: 'Demo'\n  }];\n  useEffect(() => {\n    console.log(\"useEffectData\");\n\n    if (meterreadingdata != undefined) {\n      var Mgraph = meterreadingdata.MeterGraph;\n      var Metering = meterreadingdata.Metering;\n      var MeterReading = meterreadingdata.MeterReading; //setMeterGraph(Mgraph);\n      //console.log(\"labelsReadingDatetime\");\n      //console.log(Mgraph.labelsReadingDatetime);\n\n      console.log(Mgraph);\n      console.log(Metering);\n      console.log(MeterReading);\n      setMeterGraph(Mgraph);\n      setMetering(Metering); //  setLineGraphData(GraphData);\n    }\n  }, [meterreadingdata]);\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\n          //history.push(\"/Signin\");\n          //console.log(data.MeterGraph);\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"showtalbe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    columns: columns,\n    rows: rows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 2\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 6\n    }\n  }, \"Graph\")));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Line","DataGrid","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","MeterGraph","setMeterGraph","Metering","setMetering","MeterGraph_2","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","columns","key","name","rows","id","title","console","log","undefined","Mgraph","MeterReading","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","error","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\nimport {Line} from 'react-chartjs-2';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n \r\n\r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  const[MeterGraph,setMeterGraph] =useState(\"\")\r\n  const[Metering,setMetering] =useState(\"\")\r\n\r\n  const MeterGraph_2 ={\r\n    labels: [\"21/03/2020 10:30 PM\", \"21/03/2020 11:00 PM\", \"21/03/2020 11:30 PM\", \"22/03/2020 12:00 AM\", \"22/03/2020 12:30 AM\", \"22/03/2020 1:00 AM\", \"22/03/2020 1:30 AM\", \"22/03/2020 2:00 AM\", \"22/03/2020 2:30 AM\", \"22/03/2020 3:00 AM\", \"22/03/2020 3:30 AM\", \"22/03/2020 4:00 AM\", \"22/03/2020 4:30 AM\", \"22/03/2020 5:00 AM\", \"22/03/2020 5:30 AM\", \"22/03/2020 6:00 AM\", \"22/03/2020 6:30 AM\", \"22/03/2020 7:00 AM\", \"22/03/2020 7:30 AM\", \"22/03/2020 8:00 AM\", \"22/03/2020 8:30 AM\", \"22/03/2020 9:00 AM\", \"22/03/2020 9:30 AM\", \"22/03/2020 10:00 AM\", \"22/03/2020 10:30 AM\", \"22/03/2020 11:00 AM\", \"22/03/2020 11:30 AM\", \"22/03/2020 12:00 PM\", \"22/03/2020 12:30 PM\", \"22/03/2020 1:00 PM\", \"22/03/2020 1:30 PM\", \"22/03/2020 2:00 PM\", \"22/03/2020 2:30 PM\", \"22/03/2020 3:00 PM\", \"22/03/2020 3:30 PM\", \"22/03/2020 4:00 PM\", \"22/03/2020 4:30 PM\", \"22/03/2020 5:00 PM\", \"22/03/2020 5:30 PM\", \"22/03/2020 6:00 PM\", \"22/03/2020 6:30 PM\", \"22/03/2020 7:00 PM\", \"22/03/2020 7:30 PM\", \"22/03/2020 8:00 PM\", \"22/03/2020 8:30 PM\", \"22/03/2020 9:00 PM\", \"22/03/2020 9:30 PM\", \"22/03/2020 10:00 PM\", \"22/03/2020 10:30 PM\", \"22/03/2020 11:00 PM\", \"22/03/2020 11:30 PM\", \"23/03/2020 12:00 AM\", \"23/03/2020 12:30 AM\", \"23/03/2020 1:00 AM\", \"23/03/2020 1:30 AM\", \"23/03/2020 2:00 AM\", \"23/03/2020 2:30 AM\", \"23/03/2020 3:00 AM\", \"23/03/2020 3:30 AM\", \"23/03/2020 4:00 AM\", \"23/03/2020 4:30 AM\", \"23/03/2020 5:00 AM\", \"23/03/2020 5:30 AM\", \"23/03/2020 6:00 AM\", \"23/03/2020 6:30 AM\", \"23/03/2020 7:00 AM\", \"23/03/2020 7:30 AM\", \"23/03/2020 8:00 AM\", \"23/03/2020 8:30 AM\", \"23/03/2020 9:00 AM\", \"23/03/2020 9:30 AM\", \"23/03/2020 10:00 AM\", \"23/03/2020 10:30 AM\", \"23/03/2020 11:00 AM\", \"23/03/2020 11:30 AM\", \"23/03/2020 12:00 PM\", \"23/03/2020 12:30 PM\", \"23/03/2020 1:00 PM\", \"23/03/2020 1:30 PM\", \"23/03/2020 2:00 PM\", \"23/03/2020 2:30 PM\", \"23/03/2020 3:00 PM\", \"23/03/2020 3:30 PM\", \"23/03/2020 4:00 PM\", \"23/03/2020 4:30 PM\", \"23/03/2020 5:00 PM\", \"23/03/2020 5:30 PM\", \"23/03/2020 6:00 PM\", \"23/03/2020 6:30 PM\", \"23/03/2020 7:00 PM\", \"23/03/2020 7:30 PM\", \"23/03/2020 8:00 PM\", \"23/03/2020 8:30 PM\", \"23/03/2020 9:00 PM\", \"23/03/2020 9:30 PM\", \"23/03/2020 10:00 PM\", \"23/03/2020 10:30 PM\", \"23/03/2020 11:00 PM\", \"23/03/2020 11:30 PM\", \"24/03/2020 12:00 AM\"],\r\n    datasets: [\r\n      {\r\n        label:\"WH\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data:  [27180198, 27180301, 27180403, 27180506, 27180608, 27180710, 27180812, 27180913, 27181012, 27181112, 27181214, 27181378, 27181507, 27181639, 27181783, 27181932, 27182092, 27182342, 27182700, 27183092, 27183472, 27183853, 27184245, 27184642, 27185030, 27185423, 27185759, 27186042, 27186278, 27186470, 27186646, 27186804, 27186940, 27187075, 27187218, 27187357, 27187485, 27187610, 27187733, 27187845, 27187951, 27188056, 27188162, 27188267, 27188373, 27188478, 27188583, 27188686, 27188792, 27188895, 27188999, 27189103, 27189209, 27189314, 27189420, 27189522, 27189623, 27189725, 27189830, 27189991, 27190128, 27190253, 27190398, 27190563, 27190814, 27191124, 27191518, 27191896, 27192274, 27192666, 27193064, 27193474, 27193909, 27194323, 27194719, 27195118, 27195519, 27195920, 27196295, 27196674, 27197054, 27197457, 27197835, 27198173, 27198395, 27198543, 27198666, 27198791, 27198901, 27199006, 27199111, 27199214, 27199320, 27199424, 27199527, 27199631, 27199736, 27199841, 27199943, 27200046]\r\n      },\r\n      {\r\n        label:\"VARH\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: [6232597, 6232642, 6232686, 6232731, 6232776, 6232820, 6232865, 6232912, 6232957, 6233000, 6233042, 6233085, 6233131, 6233178, 6233226, 6233275, 6233325, 6233391, 6233473, 6233554, 6233631, 6233704, 6233779, 6233850, 6233913, 6233993, 6234080, 6234152, 6234211, 6234266, 6234321, 6234375, 6234419, 6234464, 6234507, 6234550, 6234590, 6234633, 6234677, 6234723, 6234768, 6234811, 6234855, 6234899, 6234943, 6234987, 6235029, 6235069, 6235112, 6235155, 6235198, 6235242, 6235287, 6235330, 6235371, 6235414, 6235455, 6235499, 6235546, 6235589, 6235631, 6235676, 6235723, 6235772, 6235824, 6235889, 6235967, 6236040, 6236112, 6236189, 6236265, 6236327, 6236394, 6236464, 6236538, 6236610, 6236683, 6236747, 6236814, 6236882, 6236950, 6237006, 6237079, 6237156, 6237231, 6237287, 6237329, 6237373, 6237418, 6237459, 6237503, 6237547, 6237593, 6237637, 6237680, 6237719, 6237760, 6237803, 6237846, 6237890]\r\n      }\r\n    ]\r\n  };\r\n  const columns = [\r\n    { key: 'id', name: 'ID' },\r\n    { key: 'title', name: 'Title' }\r\n  ];\r\n  \r\n  const rows = [\r\n    { id: 0, title: 'Example' },\r\n    { id: 1, title: 'Demo' }\r\n  ];\r\n  \r\n  \r\n  \r\n\r\n\r\n  useEffect(()=>{\r\n    console.log(\"useEffectData\")\r\n   \r\n    if(meterreadingdata!=undefined)\r\n    {\r\n\r\n      var Mgraph=meterreadingdata.MeterGraph\r\n      var Metering =meterreadingdata.Metering\r\n      var MeterReading =meterreadingdata.MeterReading\r\n\r\n            //setMeterGraph(Mgraph);\r\n           \r\n             //console.log(\"labelsReadingDatetime\");\r\n             //console.log(Mgraph.labelsReadingDatetime);\r\n             console.log(Mgraph);\r\n             console.log(Metering);\r\n             console.log(MeterReading);\r\n             setMeterGraph(Mgraph)\r\n             setMetering(Metering)\r\n\r\n            \r\n\r\n          //  setLineGraphData(GraphData);\r\n \r\n\r\n    }\r\n  \r\n  },[meterreadingdata]);\r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    \r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n              //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\r\n               //history.push(\"/Signin\");\r\n             //console.log(data.MeterGraph);\r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 <input \r\n                  type=\"text\"\r\n                  value={serial}\r\n                  onChange={(e)=>setSerial(e.target.value)}\r\n                  placeholder=\"Please Enter serial\">\r\n                 </input>\r\n   \r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"showtalbe\">\r\n  \r\n <DataGrid\r\n      columns={columns}\r\n      rows={rows}\r\n    />\r\n </div>\r\n <div className=\"graph\">\r\n     <h5>Graph</h5>\r\n     {/* <Line data={MeterGraph}></Line> */}\r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}