{"ast":null,"code":"import React, { createElement } from 'react';\nimport classNames from 'classnames';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport ResizableHeaderCell from './headerCells/ResizableHeaderCell';\nexport default function HeaderCell({\n  column,\n  lastFrozenColumnIndex,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}) {\n  function getCell() {\n    if (!column.headerRenderer) return column.name;\n    return createElement(column.headerRenderer, {\n      column,\n      allRowsSelected,\n      onAllRowsSelectionChange\n    });\n  }\n\n  let cell = getCell();\n\n  if (column.sortable) {\n    cell = React.createElement(SortableHeaderCell, {\n      column: column,\n      onSort: onSort,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection\n    }, cell);\n  }\n\n  const className = classNames('rdg-cell', column.headerCellClass, {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n  });\n  const style = {\n    width: column.width,\n    left: column.left\n  };\n  cell = React.createElement(\"div\", {\n    className: className,\n    style: style\n  }, cell);\n\n  if (column.resizable) {\n    cell = React.createElement(ResizableHeaderCell, {\n      column: column,\n      onResize: onResize\n    }, cell);\n  }\n\n  return cell;\n}","map":{"version":3,"sources":["../src/HeaderCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,aAAhB,QAAqC,OAArC;AACA,OAAO,UAAP,MAAuB,YAAvB;AAIA,OAAO,kBAAP,MAA+B,kCAA/B;AACA,OAAO,mBAAP,MAAgC,mCAAhC;AAgBA,eAAc,SAAU,UAAV,CAA4B;AACxC,EAAA,MADwC;AAExC,EAAA,qBAFwC;AAGxC,EAAA,QAHwC;AAIxC,EAAA,eAJwC;AAKxC,EAAA,wBALwC;AAMxC,EAAA,UANwC;AAOxC,EAAA,aAPwC;AAQxC,EAAA;AARwC,CAA5B,EASW;AACvB,WAAS,OAAT,GAAgB;AACd,QAAI,CAAC,MAAM,CAAC,cAAZ,EAA4B,OAAO,MAAM,CAAC,IAAd;AAE5B,WAAO,aAAa,CAAC,MAAM,CAAC,cAAR,EAAwB;AAAE,MAAA,MAAF;AAAU,MAAA,eAAV;AAA2B,MAAA;AAA3B,KAAxB,CAApB;AACD;;AAED,MAAI,IAAI,GAAG,OAAO,EAAlB;;AAEA,MAAI,MAAM,CAAC,QAAX,EAAqB;AACnB,IAAA,IAAI,GACF,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB;AACjB,MAAA,MAAM,EAAE,MADS;AAEjB,MAAA,MAAM,EAAE,MAFS;AAGjB,MAAA,UAAU,EAAE,UAHK;AAIjB,MAAA,aAAa,EAAE;AAJE,KAAnB,EAMG,IANH,CADF;AAUD;;AAED,QAAM,SAAS,GAAG,UAAU,CAAC,UAAD,EAAa,MAAM,CAAC,eAApB,EAAqC;AAC/D,uBAAmB,MAAM,CAAC,MADqC;AAE/D,4BAAwB,MAAM,CAAC,GAAP,KAAe;AAFwB,GAArC,CAA5B;AAIA,QAAM,KAAK,GAAwB;AACjC,IAAA,KAAK,EAAE,MAAM,CAAC,KADmB;AAEjC,IAAA,IAAI,EAAE,MAAM,CAAC;AAFoB,GAAnC;AAKA,EAAA,IAAI,GACF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAS,EAAE,SADb;AAEE,IAAA,KAAK,EAAE;AAFT,GAAA,EAIG,IAJH,CADF;;AASA,MAAI,MAAM,CAAC,SAAX,EAAsB;AACpB,IAAA,IAAI,GACF,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAClB,MAAA,MAAM,EAAE,MADU;AAElB,MAAA,QAAQ,EAAE;AAFQ,KAApB,EAIG,IAJH,CADF;AAQD;;AAED,SAAO,IAAP;AACD","sourcesContent":["import React, { createElement } from 'react';\nimport classNames from 'classnames';\n\nimport { CalculatedColumn } from './common/types';\nimport { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport ResizableHeaderCell from './headerCells/ResizableHeaderCell';\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, never, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  lastFrozenColumnIndex: number;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  lastFrozenColumnIndex,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function getCell() {\n    if (!column.headerRenderer) return column.name;\n\n    return createElement(column.headerRenderer, { column, allRowsSelected, onAllRowsSelectionChange });\n  }\n\n  let cell = getCell();\n\n  if (column.sortable) {\n    cell = (\n      <SortableHeaderCell\n        column={column}\n        onSort={onSort}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n      >\n        {cell}\n      </SortableHeaderCell>\n    );\n  }\n\n  const className = classNames('rdg-cell', column.headerCellClass, {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n  });\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  cell = (\n    <div\n      className={className}\n      style={style}\n    >\n      {cell}\n    </div>\n  );\n\n  if (column.resizable) {\n    cell = (\n      <ResizableHeaderCell\n        column={column}\n        onResize={onResize}\n      >\n        {cell as React.ReactElement<React.ComponentProps<'div'>>}\n      </ResizableHeaderCell>\n    );\n  }\n\n  return cell;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}