{"ast":null,"code":"import classNames from 'classnames';\nimport React, { memo } from 'react';\nimport Cell from './Cell';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Row({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  eventBus,\n  rowIdx,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  onRowClick,\n  row,\n  viewportColumns,\n  onDragEnter,\n  onDragOver,\n  onDrop,\n  ...props\n}) {\n  function handleDragEnter(event) {\n    // Prevent default to allow drop\n    event.preventDefault();\n    eventBus.dispatch('DRAG_ENTER', rowIdx);\n  }\n\n  function handleDragOver(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  className = classNames('rdg-row', `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n    'rdg-row-selected': isRowSelected\n  }, className); // Regarding onDrop: the default in Firefox is to treat data in dataTransfer as a URL,\n  // and perform navigation on it, even if the data type used is 'text'.\n  // To bypass this, we need to capture and prevent the drop event.\n\n  return React.createElement(\"div\", Object.assign({\n    className: className,\n    onDragEnter: wrapEvent(handleDragEnter, onDragEnter),\n    onDragOver: wrapEvent(handleDragOver, onDragOver),\n    onDrop: wrapEvent(preventDefault, onDrop)\n  }, props), viewportColumns.map(column => React.createElement(CellRenderer, {\n    key: column.key,\n    rowIdx: rowIdx,\n    column: column,\n    lastFrozenColumnIndex: lastFrozenColumnIndex,\n    row: row,\n    isRowSelected: isRowSelected,\n    eventBus: eventBus,\n    onRowClick: onRowClick\n  })));\n}\n\nexport default memo(Row);","map":{"version":3,"sources":["../src/Row.tsx"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAP,IAAgB,IAAhB,QAA4B,OAA5B;AAEA,OAAO,IAAP,MAAiB,QAAjB;AAEA,SAAS,cAAT,EAAyB,SAAzB,QAA0C,SAA1C;;AAEA,SAAS,GAAT,CAA8B;AAC5B,EAAA,YAAY,EAAE,YAAY,GAAG,IADD;AAE5B,EAAA,SAF4B;AAG5B,EAAA,QAH4B;AAI5B,EAAA,MAJ4B;AAK5B,EAAA,aAL4B;AAM5B,EAAA,qBAN4B;AAO5B,EAAA,UAP4B;AAQ5B,EAAA,GAR4B;AAS5B,EAAA,eAT4B;AAU5B,EAAA,WAV4B;AAW5B,EAAA,UAX4B;AAY5B,EAAA,MAZ4B;AAa5B,KAAG;AAbyB,CAA9B,EAc0B;AACxB,WAAS,eAAT,CAAyB,KAAzB,EAA+D;AAC7D;AACA,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,QAAQ,CAAC,QAAT,CAAkB,YAAlB,EAAgC,MAAhC;AACD;;AAED,WAAS,cAAT,CAAwB,KAAxB,EAA8D;AAC5D,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,KAAK,CAAC,YAAN,CAAmB,UAAnB,GAAgC,MAAhC;AACD;;AAED,EAAA,SAAS,GAAG,UAAU,CACpB,SADoB,EAEpB,WAAW,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAK,EAFxB,EAGpB;AAAE,wBAAoB;AAAtB,GAHoB,EAIpB,SAJoB,CAAtB,CAZwB,CAmBxB;AACA;AACA;;AACA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,SADb;AAEE,IAAA,WAAW,EAAE,SAAS,CAAC,eAAD,EAAkB,WAAlB,CAFxB;AAGE,IAAA,UAAU,EAAE,SAAS,CAAC,cAAD,EAAiB,UAAjB,CAHvB;AAIE,IAAA,MAAM,EAAE,SAAS,CAAC,cAAD,EAAiB,MAAjB;AAJnB,GAAA,EAKM,KALN,CAAA,EAOG,eAAe,CAAC,GAAhB,CAAoB,MAAM,IACzB,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,GAAG,EAAE,MAAM,CAAC,GADD;AAEX,IAAA,MAAM,EAAE,MAFG;AAGX,IAAA,MAAM,EAAE,MAHG;AAIX,IAAA,qBAAqB,EAAE,qBAJZ;AAKX,IAAA,GAAG,EAAE,GALM;AAMX,IAAA,aAAa,EAAE,aANJ;AAOX,IAAA,QAAQ,EAAE,QAPC;AAQX,IAAA,UAAU,EAAE;AARD,GAAb,CADD,CAPH,CADF;AAsBD;;AAED,eAAe,IAAI,CAAC,GAAD,CAAnB","sourcesContent":["import classNames from 'classnames';\nimport React, { memo } from 'react';\n\nimport Cell from './Cell';\nimport { RowRendererProps } from './common/types';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  eventBus,\n  rowIdx,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  onRowClick,\n  row,\n  viewportColumns,\n  onDragEnter,\n  onDragOver,\n  onDrop,\n  ...props\n}: RowRendererProps<R, SR>) {\n  function handleDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    // Prevent default to allow drop\n    event.preventDefault();\n    eventBus.dispatch('DRAG_ENTER', rowIdx);\n  }\n\n  function handleDragOver(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  className = classNames(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    { 'rdg-row-selected': isRowSelected },\n    className\n  );\n\n  // Regarding onDrop: the default in Firefox is to treat data in dataTransfer as a URL,\n  // and perform navigation on it, even if the data type used is 'text'.\n  // To bypass this, we need to capture and prevent the drop event.\n  return (\n    <div\n      className={className}\n      onDragEnter={wrapEvent(handleDragEnter, onDragEnter)}\n      onDragOver={wrapEvent(handleDragOver, onDragOver)}\n      onDrop={wrapEvent(preventDefault, onDrop)}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <CellRenderer\n          key={column.key}\n          rowIdx={rowIdx}\n          column={column}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          row={row}\n          isRowSelected={isRowSelected}\n          eventBus={eventBus}\n          onRowClick={onRowClick}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(Row) as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}