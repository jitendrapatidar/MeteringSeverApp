{"ast":null,"code":"import React, { createElement, memo } from 'react';\nimport classNames from 'classnames';\n\nfunction FilterRow({\n  columns,\n  lastFrozenColumnIndex,\n  filters,\n  onFiltersChange\n}) {\n  function onChange(key, value) {\n    const newFilters = { ...filters\n    };\n    newFilters[key] = value;\n    onFiltersChange === null || onFiltersChange === void 0 ? void 0 : onFiltersChange(newFilters);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"rdg-filter-row\"\n  }, columns.map(column => {\n    const {\n      key\n    } = column;\n    const className = classNames('rdg-cell', {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n    });\n    const style = {\n      width: column.width,\n      left: column.left\n    };\n    return React.createElement(\"div\", {\n      key: key,\n      style: style,\n      className: className\n    }, column.filterRenderer && createElement(column.filterRenderer, {\n      column,\n      value: filters === null || filters === void 0 ? void 0 : filters[column.key],\n      onChange: value => onChange(key, value)\n    }));\n  }));\n}\n\nexport default memo(FilterRow);","map":{"version":3,"sources":["../src/FilterRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,aAAhB,EAA+B,IAA/B,QAA2C,OAA3C;AACA,OAAO,UAAP,MAAuB,YAAvB;;AAeA,SAAS,SAAT,CAA0B;AACxB,EAAA,OADwB;AAExB,EAAA,qBAFwB;AAGxB,EAAA,OAHwB;AAIxB,EAAA;AAJwB,CAA1B,EAKwB;AACtB,WAAS,QAAT,CAAkB,GAAlB,EAA+B,KAA/B,EAA6C;AAC3C,UAAM,UAAU,GAAY,EAAE,GAAG;AAAL,KAA5B;AACA,IAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,KAAlB;AACA,IAAA,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAG,UAAH,CAAf;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACG,OAAO,CAAC,GAAR,CAAY,MAAM,IAAG;AACpB,UAAM;AAAE,MAAA;AAAF,QAAU,MAAhB;AAEA,UAAM,SAAS,GAAG,UAAU,CAAC,UAAD,EAAa;AACvC,yBAAmB,MAAM,CAAC,MADa;AAEvC,8BAAwB,MAAM,CAAC,GAAP,KAAe;AAFA,KAAb,CAA5B;AAIA,UAAM,KAAK,GAAwB;AACjC,MAAA,KAAK,EAAE,MAAM,CAAC,KADmB;AAEjC,MAAA,IAAI,EAAE,MAAM,CAAC;AAFoB,KAAnC;AAKA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,GAAG,EAAE,GADP;AAEE,MAAA,KAAK,EAAE,KAFT;AAGE,MAAA,SAAS,EAAE;AAHb,KAAA,EAKG,MAAM,CAAC,cAAP,IAAyB,aAAa,CAAC,MAAM,CAAC,cAAR,EAAwB;AAC7D,MAAA,MAD6D;AAE7D,MAAA,KAAK,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAG,MAAM,CAAC,GAAV,CAF+C;AAG7D,MAAA,QAAQ,EAAE,KAAK,IAAI,QAAQ,CAAC,GAAD,EAAM,KAAN;AAHkC,KAAxB,CALzC,CADF;AAaD,GAzBA,CADH,CADF;AA8BD;;AAED,eAAe,IAAI,CAAC,SAAD,CAAnB","sourcesContent":["import React, { createElement, memo } from 'react';\nimport classNames from 'classnames';\n\nimport { CalculatedColumn, Filters } from './common/types';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, never, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\nexport interface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  lastFrozenColumnIndex: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  lastFrozenColumnIndex,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div className=\"rdg-filter-row\">\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = classNames('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && createElement(column.filterRenderer, {\n              column,\n              value: filters?.[column.key],\n              onChange: value => onChange(key, value)\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}