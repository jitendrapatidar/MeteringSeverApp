{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\"; //import {Line} from 'react-chartjs-2';\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  useEffect(() => {\n    console.log(\"useEffectData\"); //console.log(meterreadingdata);\n\n    var Mgraph = meterreadingdata.MeterGraph;\n\n    if (Mgraph != undefined) {\n      console.log(\"labelsReadingDatetime\");\n      console.log(Mgraph.labelsReadingDatetime);\n    } //console.log(Mgraph);\n    // console.log(Mgraph.labelsReadingDatetime);\n    // console.log(Mgraph.labelWH);\n    // console.log(Mgraph.dataWH);\n    // console.log(Mgraph.lableVARH);\n    // console.log(Mgraph.dataVARH);\n    // const data = {\n    //   labels = [\"21/03/2020 10:30 PM\", \"bbb\", \"ccc\"],\n    //   datasets = [\n    //    { label: \"WH\", backgroundColor: \"rgba(75,192,192,1)\",borderColor: 'rgba(0,0,0,1)', data: [27180198]},\n    //     { label: \"VARH\", backgroundColor: \"rgba(75,192,192,1)\",borderColor: 'rgba(0,0,2,2)', data: [6232597]},\n    //   ]\n    //  }\n\n  }, [meterreadingdata]);\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\n          //history.push(\"/Signin\");\n          //console.log(data.MeterGraph);\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 6\n    }\n  }, \"Graph\")));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","console","log","Mgraph","MeterGraph","undefined","labelsReadingDatetime","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","data","error","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\n//import {Line} from 'react-chartjs-2';\r\n\r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  \r\n  useEffect(()=>{\r\n    console.log(\"useEffectData\")\r\n    //console.log(meterreadingdata);\r\n\r\n    var Mgraph=meterreadingdata.MeterGraph\r\n    if(Mgraph!=undefined)\r\n    {\r\n           \r\n             console.log(\"labelsReadingDatetime\");\r\n             console.log(Mgraph.labelsReadingDatetime);\r\n\r\n    }\r\n    //console.log(Mgraph);\r\n    // console.log(Mgraph.labelsReadingDatetime);\r\n    // console.log(Mgraph.labelWH);\r\n    // console.log(Mgraph.dataWH);\r\n    // console.log(Mgraph.lableVARH);\r\n    // console.log(Mgraph.dataVARH);\r\n\r\n  // const data = {\r\n  //   labels = [\"21/03/2020 10:30 PM\", \"bbb\", \"ccc\"],\r\n  //   datasets = [\r\n  //    { label: \"WH\", backgroundColor: \"rgba(75,192,192,1)\",borderColor: 'rgba(0,0,0,1)', data: [27180198]},\r\n  //     { label: \"VARH\", backgroundColor: \"rgba(75,192,192,1)\",borderColor: 'rgba(0,0,2,2)', data: [6232597]},\r\n  //   ]\r\n  //  }\r\n\r\n  },[meterreadingdata]);\r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    \r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n              //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\r\n               //history.push(\"/Signin\");\r\n             //console.log(data.MeterGraph);\r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 <input \r\n                  type=\"text\"\r\n                  value={serial}\r\n                  onChange={(e)=>setSerial(e.target.value)}\r\n                  placeholder=\"Please Enter serial\">\r\n                 </input>\r\n   \r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"graph\">\r\n     <h5>Graph</h5>\r\n     \r\n     {/* <Line data={data} /> */}\r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}