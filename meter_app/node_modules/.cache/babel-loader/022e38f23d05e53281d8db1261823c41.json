{"ast":null,"code":"export default class EventBus {\n  constructor() {\n    this.subscribers = new Map();\n  }\n\n  subscribe(type, handler) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n\n    const handlers = this.subscribers.get(type);\n    handlers.add(handler);\n    return () => {\n      handlers.delete(handler);\n    };\n  }\n\n  dispatch(type, ...args) {\n    const handlers = this.subscribers.get(type);\n\n    if (handlers) {\n      // handler needed a type assertion to fix type bug\n      handlers.forEach(handler => handler(...args));\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/EventBus.ts"],"names":[],"mappings":"AAUA,eAAc,MAAO,QAAP,CAAe;AAA7B,EAAA,WAAA,GAAA;AACmB,SAAA,WAAA,GAAc,IAAI,GAAJ,EAAd;AAsBlB;;AApBC,EAAA,SAAS,CAAsB,IAAtB,EAA+B,OAA/B,EAAmD;AAC1D,QAAI,CAAC,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAL,EAAiC;AAC/B,WAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,EAA2B,IAAI,GAAJ,EAA3B;AACD;;AAED,UAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAjB;AACA,IAAA,QAAQ,CAAC,GAAT,CAAa,OAAb;AAEA,WAAO,MAAK;AACV,MAAA,QAAQ,CAAC,MAAT,CAAgB,OAAhB;AACD,KAFD;AAGD;;AAED,EAAA,QAAQ,CAAsB,IAAtB,EAA+B,GAAG,IAAlC,EAA+D;AACrE,UAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAjB;;AACA,QAAI,QAAJ,EAAc;AACZ;AACA,MAAA,QAAQ,CAAC,OAAT,CAAiB,OAAO,IAAK,OAAsD,CAAC,GAAG,IAAJ,CAAnF;AACD;AACF;;AAtB0B","sourcesContent":["import { Position, SelectRowEvent } from './common/types';\n\ninterface EventMap {\n  SELECT_CELL: (position: Position, enableEditor?: boolean) => void;\n  SELECT_ROW: (event: SelectRowEvent) => void;\n  DRAG_ENTER: (overRowIdx: number) => void;\n}\n\ntype EventName = keyof EventMap;\n\nexport default class EventBus {\n  private readonly subscribers = new Map<EventName, Set<EventMap[EventName]>>();\n\n  subscribe<T extends EventName>(type: T, handler: EventMap[T]) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n\n    const handlers = this.subscribers.get(type)!;\n    handlers.add(handler);\n\n    return () => {\n      handlers.delete(handler);\n    };\n  }\n\n  dispatch<T extends EventName>(type: T, ...args: Parameters<EventMap[T]>) {\n    const handlers = this.subscribers.get(type);\n    if (handlers) {\n      // handler needed a type assertion to fix type bug\n      handlers.forEach(handler => (handler as (...args: Parameters<EventMap[T]>) => void)(...args));\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}