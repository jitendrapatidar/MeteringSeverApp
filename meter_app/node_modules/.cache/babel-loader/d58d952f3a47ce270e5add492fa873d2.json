{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\";\nimport { Line } from 'react-chartjs-2';\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  const [MeterGraph, setMeterGraph] = useState(\"\");\n  useEffect(() => {\n    console.log(\"useEffectData\");\n    var Mgraph = meterreadingdata.MeterGraph;\n\n    if (Mgraph != undefined) {//console.log(\"labelsReadingDatetime\");\n      //console.log(Mgraph.labelsReadingDatetime);\n      //console.log(Mgraph.labelWH);\n      //console.log(Mgraph.dataWH);\n      //console.log(Mgraph.lableVARH);\n      //console.log(Mgraph.dataVARH);\n      //    const GraphData = {\n      //     labels: [\"21/03/2020 10:30 PM\", \"21/03/2020 11:00 PM\", \"21/03/2020 11:30 PM\", \"22/03/2020 12:00 AM\", \"22/03/2020 12:30 AM\", \"22/03/2020 1:00 AM\", \"22/03/2020 1:30 AM\", \"22/03/2020 2:00 AM\", \"22/03/2020 2:30 AM\", \"22/03/2020 3:00 AM\", \"22/03/2020 3:30 AM\", \"22/03/2020 4:00 AM\", \"22/03/2020 4:30 AM\", \"22/03/2020 5:00 AM\", \"22/03/2020 5:30 AM\", \"22/03/2020 6:00 AM\", \"22/03/2020 6:30 AM\", \"22/03/2020 7:00 AM\", \"22/03/2020 7:30 AM\", \"22/03/2020 8:00 AM\", \"22/03/2020 8:30 AM\", \"22/03/2020 9:00 AM\", \"22/03/2020 9:30 AM\", \"22/03/2020 10:00 AM\", \"22/03/2020 10:30 AM\", \"22/03/2020 11:00 AM\", \"22/03/2020 11:30 AM\", \"22/03/2020 12:00 PM\", \"22/03/2020 12:30 PM\", \"22/03/2020 1:00 PM\", \"22/03/2020 1:30 PM\", \"22/03/2020 2:00 PM\", \"22/03/2020 2:30 PM\", \"22/03/2020 3:00 PM\", \"22/03/2020 3:30 PM\", \"22/03/2020 4:00 PM\", \"22/03/2020 4:30 PM\", \"22/03/2020 5:00 PM\", \"22/03/2020 5:30 PM\", \"22/03/2020 6:00 PM\", \"22/03/2020 6:30 PM\", \"22/03/2020 7:00 PM\", \"22/03/2020 7:30 PM\", \"22/03/2020 8:00 PM\", \"22/03/2020 8:30 PM\", \"22/03/2020 9:00 PM\", \"22/03/2020 9:30 PM\", \"22/03/2020 10:00 PM\", \"22/03/2020 10:30 PM\", \"22/03/2020 11:00 PM\", \"22/03/2020 11:30 PM\", \"23/03/2020 12:00 AM\", \"23/03/2020 12:30 AM\", \"23/03/2020 1:00 AM\", \"23/03/2020 1:30 AM\", \"23/03/2020 2:00 AM\", \"23/03/2020 2:30 AM\", \"23/03/2020 3:00 AM\", \"23/03/2020 3:30 AM\", \"23/03/2020 4:00 AM\", \"23/03/2020 4:30 AM\", \"23/03/2020 5:00 AM\", \"23/03/2020 5:30 AM\", \"23/03/2020 6:00 AM\", \"23/03/2020 6:30 AM\", \"23/03/2020 7:00 AM\", \"23/03/2020 7:30 AM\", \"23/03/2020 8:00 AM\", \"23/03/2020 8:30 AM\", \"23/03/2020 9:00 AM\", \"23/03/2020 9:30 AM\", \"23/03/2020 10:00 AM\", \"23/03/2020 10:30 AM\", \"23/03/2020 11:00 AM\", \"23/03/2020 11:30 AM\", \"23/03/2020 12:00 PM\", \"23/03/2020 12:30 PM\", \"23/03/2020 1:00 PM\", \"23/03/2020 1:30 PM\", \"23/03/2020 2:00 PM\", \"23/03/2020 2:30 PM\", \"23/03/2020 3:00 PM\", \"23/03/2020 3:30 PM\", \"23/03/2020 4:00 PM\", \"23/03/2020 4:30 PM\", \"23/03/2020 5:00 PM\", \"23/03/2020 5:30 PM\", \"23/03/2020 6:00 PM\", \"23/03/2020 6:30 PM\", \"23/03/2020 7:00 PM\", \"23/03/2020 7:30 PM\", \"23/03/2020 8:00 PM\", \"23/03/2020 8:30 PM\", \"23/03/2020 9:00 PM\", \"23/03/2020 9:30 PM\", \"23/03/2020 10:00 PM\", \"23/03/2020 10:30 PM\", \"23/03/2020 11:00 PM\", \"23/03/2020 11:30 PM\", \"24/03/2020 12:00 AM\"],\n      //     datasets: [\n      //       {\n      //         label:\"WH\",\n      //         fill: false,\n      //         lineTension: 0.1,\n      //         backgroundColor: 'rgba(75,192,192,0.4)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderCapStyle: 'butt',\n      //         borderDash: [],\n      //         borderDashOffset: 0.0,\n      //         borderJoinStyle: 'miter',\n      //         pointBorderColor: 'rgba(75,192,192,1)',\n      //         pointBackgroundColor: '#fff',\n      //         pointBorderWidth: 1,\n      //         pointHoverRadius: 5,\n      //         pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointHoverBorderColor: 'rgba(220,220,220,1)',\n      //         pointHoverBorderWidth: 2,\n      //         pointRadius: 1,\n      //         pointHitRadius: 10,\n      //         data: Â [27180198, 27180301, 27180403, 27180506, 27180608, 27180710, 27180812, 27180913, 27181012, 27181112, 27181214, 27181378, 27181507, 27181639, 27181783, 27181932, 27182092, 27182342, 27182700, 27183092, 27183472, 27183853, 27184245, 27184642, 27185030, 27185423, 27185759, 27186042, 27186278, 27186470, 27186646, 27186804, 27186940, 27187075, 27187218, 27187357, 27187485, 27187610, 27187733, 27187845, 27187951, 27188056, 27188162, 27188267, 27188373, 27188478, 27188583, 27188686, 27188792, 27188895, 27188999, 27189103, 27189209, 27189314, 27189420, 27189522, 27189623, 27189725, 27189830, 27189991, 27190128, 27190253, 27190398, 27190563, 27190814, 27191124, 27191518, 27191896, 27192274, 27192666, 27193064, 27193474, 27193909, 27194323, 27194719, 27195118, 27195519, 27195920, 27196295, 27196674, 27197054, 27197457, 27197835, 27198173, 27198395, 27198543, 27198666, 27198791, 27198901, 27199006, 27199111, 27199214, 27199320, 27199424, 27199527, 27199631, 27199736, 27199841, 27199943, 27200046]\n      //       },\n      //       {\n      //         label:\"VARH\",\n      //         fill: false,\n      //         lineTension: 0.1,\n      //         backgroundColor: 'rgba(75,192,192,0.4)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderCapStyle: 'butt',\n      //         borderDash: [],\n      //         borderDashOffset: 0.0,\n      //         borderJoinStyle: 'miter',\n      //         pointBorderColor: 'rgba(75,192,192,1)',\n      //         pointBackgroundColor: '#fff',\n      //         pointBorderWidth: 1,\n      //         pointHoverRadius: 5,\n      //         pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointHoverBorderColor: 'rgba(220,220,220,1)',\n      //         pointHoverBorderWidth: 2,\n      //         pointRadius: 1,\n      //         pointHitRadius: 10,\n      //         data: [6232597, 6232642, 6232686, 6232731, 6232776, 6232820, 6232865, 6232912, 6232957, 6233000, 6233042, 6233085, 6233131, 6233178, 6233226, 6233275, 6233325, 6233391, 6233473, 6233554, 6233631, 6233704, 6233779, 6233850, 6233913, 6233993, 6234080, 6234152, 6234211, 6234266, 6234321, 6234375, 6234419, 6234464, 6234507, 6234550, 6234590, 6234633, 6234677, 6234723, 6234768, 6234811, 6234855, 6234899, 6234943, 6234987, 6235029, 6235069, 6235112, 6235155, 6235198, 6235242, 6235287, 6235330, 6235371, 6235414, 6235455, 6235499, 6235546, 6235589, 6235631, 6235676, 6235723, 6235772, 6235824, 6235889, 6235967, 6236040, 6236112, 6236189, 6236265, 6236327, 6236394, 6236464, 6236538, 6236610, 6236683, 6236747, 6236814, 6236882, 6236950, 6237006, 6237079, 6237156, 6237231, 6237287, 6237329, 6237373, 6237418, 6237459, 6237503, 6237547, 6237593, 6237637, 6237680, 6237719, 6237760, 6237803, 6237846, 6237890]\n      //       }\n      //     ]\n      //   };\n      //  setLineGraphData(GraphData);\n    }\n  }, [meterreadingdata]);\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\n          //history.push(\"/Signin\");\n          //console.log(data.MeterGraph);\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 6\n    }\n  }, \"Graph\")));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Line","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","MeterGraph","setMeterGraph","console","log","Mgraph","undefined","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","data","error","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\nimport {Line} from 'react-chartjs-2';\r\n \r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  const[MeterGraph,setMeterGraph] =useState(\"\")\r\n\r\n  useEffect(()=>{\r\n    console.log(\"useEffectData\")\r\n   \r\n\r\n    var Mgraph=meterreadingdata.MeterGraph\r\n    if(Mgraph!=undefined)\r\n    {\r\n           \r\n             //console.log(\"labelsReadingDatetime\");\r\n             //console.log(Mgraph.labelsReadingDatetime);\r\n             //console.log(Mgraph.labelWH);\r\n             //console.log(Mgraph.dataWH);\r\n             //console.log(Mgraph.lableVARH);\r\n             //console.log(Mgraph.dataVARH);\r\n\r\n          //    const GraphData = {\r\n          //     labels: [\"21/03/2020 10:30 PM\", \"21/03/2020 11:00 PM\", \"21/03/2020 11:30 PM\", \"22/03/2020 12:00 AM\", \"22/03/2020 12:30 AM\", \"22/03/2020 1:00 AM\", \"22/03/2020 1:30 AM\", \"22/03/2020 2:00 AM\", \"22/03/2020 2:30 AM\", \"22/03/2020 3:00 AM\", \"22/03/2020 3:30 AM\", \"22/03/2020 4:00 AM\", \"22/03/2020 4:30 AM\", \"22/03/2020 5:00 AM\", \"22/03/2020 5:30 AM\", \"22/03/2020 6:00 AM\", \"22/03/2020 6:30 AM\", \"22/03/2020 7:00 AM\", \"22/03/2020 7:30 AM\", \"22/03/2020 8:00 AM\", \"22/03/2020 8:30 AM\", \"22/03/2020 9:00 AM\", \"22/03/2020 9:30 AM\", \"22/03/2020 10:00 AM\", \"22/03/2020 10:30 AM\", \"22/03/2020 11:00 AM\", \"22/03/2020 11:30 AM\", \"22/03/2020 12:00 PM\", \"22/03/2020 12:30 PM\", \"22/03/2020 1:00 PM\", \"22/03/2020 1:30 PM\", \"22/03/2020 2:00 PM\", \"22/03/2020 2:30 PM\", \"22/03/2020 3:00 PM\", \"22/03/2020 3:30 PM\", \"22/03/2020 4:00 PM\", \"22/03/2020 4:30 PM\", \"22/03/2020 5:00 PM\", \"22/03/2020 5:30 PM\", \"22/03/2020 6:00 PM\", \"22/03/2020 6:30 PM\", \"22/03/2020 7:00 PM\", \"22/03/2020 7:30 PM\", \"22/03/2020 8:00 PM\", \"22/03/2020 8:30 PM\", \"22/03/2020 9:00 PM\", \"22/03/2020 9:30 PM\", \"22/03/2020 10:00 PM\", \"22/03/2020 10:30 PM\", \"22/03/2020 11:00 PM\", \"22/03/2020 11:30 PM\", \"23/03/2020 12:00 AM\", \"23/03/2020 12:30 AM\", \"23/03/2020 1:00 AM\", \"23/03/2020 1:30 AM\", \"23/03/2020 2:00 AM\", \"23/03/2020 2:30 AM\", \"23/03/2020 3:00 AM\", \"23/03/2020 3:30 AM\", \"23/03/2020 4:00 AM\", \"23/03/2020 4:30 AM\", \"23/03/2020 5:00 AM\", \"23/03/2020 5:30 AM\", \"23/03/2020 6:00 AM\", \"23/03/2020 6:30 AM\", \"23/03/2020 7:00 AM\", \"23/03/2020 7:30 AM\", \"23/03/2020 8:00 AM\", \"23/03/2020 8:30 AM\", \"23/03/2020 9:00 AM\", \"23/03/2020 9:30 AM\", \"23/03/2020 10:00 AM\", \"23/03/2020 10:30 AM\", \"23/03/2020 11:00 AM\", \"23/03/2020 11:30 AM\", \"23/03/2020 12:00 PM\", \"23/03/2020 12:30 PM\", \"23/03/2020 1:00 PM\", \"23/03/2020 1:30 PM\", \"23/03/2020 2:00 PM\", \"23/03/2020 2:30 PM\", \"23/03/2020 3:00 PM\", \"23/03/2020 3:30 PM\", \"23/03/2020 4:00 PM\", \"23/03/2020 4:30 PM\", \"23/03/2020 5:00 PM\", \"23/03/2020 5:30 PM\", \"23/03/2020 6:00 PM\", \"23/03/2020 6:30 PM\", \"23/03/2020 7:00 PM\", \"23/03/2020 7:30 PM\", \"23/03/2020 8:00 PM\", \"23/03/2020 8:30 PM\", \"23/03/2020 9:00 PM\", \"23/03/2020 9:30 PM\", \"23/03/2020 10:00 PM\", \"23/03/2020 10:30 PM\", \"23/03/2020 11:00 PM\", \"23/03/2020 11:30 PM\", \"24/03/2020 12:00 AM\"],\r\n          //     datasets: [\r\n          //       {\r\n          //         label:\"WH\",\r\n          //         fill: false,\r\n          //         lineTension: 0.1,\r\n          //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n          //         borderColor: 'rgba(75,192,192,1)',\r\n          //         borderCapStyle: 'butt',\r\n          //         borderDash: [],\r\n          //         borderDashOffset: 0.0,\r\n          //         borderJoinStyle: 'miter',\r\n          //         pointBorderColor: 'rgba(75,192,192,1)',\r\n          //         pointBackgroundColor: '#fff',\r\n          //         pointBorderWidth: 1,\r\n          //         pointHoverRadius: 5,\r\n          //         pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          //         pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          //         pointHoverBorderWidth: 2,\r\n          //         pointRadius: 1,\r\n          //         pointHitRadius: 10,\r\n          //         data: Â [27180198, 27180301, 27180403, 27180506, 27180608, 27180710, 27180812, 27180913, 27181012, 27181112, 27181214, 27181378, 27181507, 27181639, 27181783, 27181932, 27182092, 27182342, 27182700, 27183092, 27183472, 27183853, 27184245, 27184642, 27185030, 27185423, 27185759, 27186042, 27186278, 27186470, 27186646, 27186804, 27186940, 27187075, 27187218, 27187357, 27187485, 27187610, 27187733, 27187845, 27187951, 27188056, 27188162, 27188267, 27188373, 27188478, 27188583, 27188686, 27188792, 27188895, 27188999, 27189103, 27189209, 27189314, 27189420, 27189522, 27189623, 27189725, 27189830, 27189991, 27190128, 27190253, 27190398, 27190563, 27190814, 27191124, 27191518, 27191896, 27192274, 27192666, 27193064, 27193474, 27193909, 27194323, 27194719, 27195118, 27195519, 27195920, 27196295, 27196674, 27197054, 27197457, 27197835, 27198173, 27198395, 27198543, 27198666, 27198791, 27198901, 27199006, 27199111, 27199214, 27199320, 27199424, 27199527, 27199631, 27199736, 27199841, 27199943, 27200046]\r\n          //       },\r\n          //       {\r\n          //         label:\"VARH\",\r\n          //         fill: false,\r\n          //         lineTension: 0.1,\r\n          //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n          //         borderColor: 'rgba(75,192,192,1)',\r\n          //         borderCapStyle: 'butt',\r\n          //         borderDash: [],\r\n          //         borderDashOffset: 0.0,\r\n          //         borderJoinStyle: 'miter',\r\n          //         pointBorderColor: 'rgba(75,192,192,1)',\r\n          //         pointBackgroundColor: '#fff',\r\n          //         pointBorderWidth: 1,\r\n          //         pointHoverRadius: 5,\r\n          //         pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          //         pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          //         pointHoverBorderWidth: 2,\r\n          //         pointRadius: 1,\r\n          //         pointHitRadius: 10,\r\n          //         data: [6232597, 6232642, 6232686, 6232731, 6232776, 6232820, 6232865, 6232912, 6232957, 6233000, 6233042, 6233085, 6233131, 6233178, 6233226, 6233275, 6233325, 6233391, 6233473, 6233554, 6233631, 6233704, 6233779, 6233850, 6233913, 6233993, 6234080, 6234152, 6234211, 6234266, 6234321, 6234375, 6234419, 6234464, 6234507, 6234550, 6234590, 6234633, 6234677, 6234723, 6234768, 6234811, 6234855, 6234899, 6234943, 6234987, 6235029, 6235069, 6235112, 6235155, 6235198, 6235242, 6235287, 6235330, 6235371, 6235414, 6235455, 6235499, 6235546, 6235589, 6235631, 6235676, 6235723, 6235772, 6235824, 6235889, 6235967, 6236040, 6236112, 6236189, 6236265, 6236327, 6236394, 6236464, 6236538, 6236610, 6236683, 6236747, 6236814, 6236882, 6236950, 6237006, 6237079, 6237156, 6237231, 6237287, 6237329, 6237373, 6237418, 6237459, 6237503, 6237547, 6237593, 6237637, 6237680, 6237719, 6237760, 6237803, 6237846, 6237890]\r\n          //       }\r\n          //     ]\r\n          //   };\r\n          //  setLineGraphData(GraphData);\r\n \r\n\r\n    }\r\n    \r\n  \r\n\r\n  },[meterreadingdata]);\r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    \r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n              //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\r\n               //history.push(\"/Signin\");\r\n             //console.log(data.MeterGraph);\r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 <input \r\n                  type=\"text\"\r\n                  value={serial}\r\n                  onChange={(e)=>setSerial(e.target.value)}\r\n                  placeholder=\"Please Enter serial\">\r\n                 </input>\r\n   \r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"graph\">\r\n     <h5>Graph</h5>\r\n     \r\n     {/* <Line data={LineGraphData} /> */}\r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}