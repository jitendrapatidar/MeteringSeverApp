{"ast":null,"code":"import React from 'react';\nimport CellMask from './CellMask';\nexport default function DragMask({\n  draggedPosition,\n  getSelectedDimensions\n}) {\n  const {\n    overRowIdx,\n    idx,\n    rowIdx\n  } = draggedPosition;\n  if (rowIdx === overRowIdx) return null;\n  const isDraggedOverDown = rowIdx < overRowIdx;\n  const startRowIdx = isDraggedOverDown ? rowIdx + 1 : overRowIdx;\n  const endRowIdx = isDraggedOverDown ? overRowIdx : rowIdx - 1;\n  const className = isDraggedOverDown ? 'react-grid-cell-dragged-over-down' : 'react-grid-cell-dragged-over-up';\n  const dimensions = getSelectedDimensions({\n    idx,\n    rowIdx: startRowIdx\n  });\n\n  for (let currentRowIdx = startRowIdx + 1; currentRowIdx <= endRowIdx; currentRowIdx++) {\n    const {\n      height\n    } = getSelectedDimensions({\n      idx,\n      rowIdx: currentRowIdx\n    });\n    dimensions.height += height;\n  }\n\n  return React.createElement(CellMask, Object.assign({}, dimensions, {\n    className: className\n  }));\n}","map":{"version":3,"sources":["../../src/masks/DragMask.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AAGA,OAAO,QAAP,MAAqB,YAArB;AAWA,eAAc,SAAU,QAAV,CAAmB;AAAE,EAAA,eAAF;AAAmB,EAAA;AAAnB,CAAnB,EAAoE;AAChF,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA,GAAd;AAAmB,IAAA;AAAnB,MAA8B,eAApC;AACA,MAAI,MAAM,KAAK,UAAf,EAA2B,OAAO,IAAP;AAE3B,QAAM,iBAAiB,GAAG,MAAM,GAAG,UAAnC;AACA,QAAM,WAAW,GAAG,iBAAiB,GAAG,MAAM,GAAG,CAAZ,GAAgB,UAArD;AACA,QAAM,SAAS,GAAG,iBAAiB,GAAG,UAAH,GAAgB,MAAM,GAAG,CAA5D;AACA,QAAM,SAAS,GAAG,iBAAiB,GAAG,mCAAH,GAAyC,iCAA5E;AAEA,QAAM,UAAU,GAAG,qBAAqB,CAAC;AAAE,IAAA,GAAF;AAAO,IAAA,MAAM,EAAE;AAAf,GAAD,CAAxC;;AACA,OAAK,IAAI,aAAa,GAAG,WAAW,GAAG,CAAvC,EAA0C,aAAa,IAAI,SAA3D,EAAsE,aAAa,EAAnF,EAAuF;AACrF,UAAM;AAAE,MAAA;AAAF,QAAa,qBAAqB,CAAC;AAAE,MAAA,GAAF;AAAO,MAAA,MAAM,EAAE;AAAf,KAAD,CAAxC;AACA,IAAA,UAAU,CAAC,MAAX,IAAqB,MAArB;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,UAAL,EAAe;AAAE,IAAA,SAAS,EAAE;AAAb,GAAf,CAAT,CADF;AAGD","sourcesContent":["import React from 'react';\n\nimport { Position, Dimension } from '../common/types';\nimport CellMask from './CellMask';\n\nexport interface DraggedPosition extends Position {\n  overRowIdx: number;\n}\n\ninterface Props {\n  draggedPosition: DraggedPosition;\n  getSelectedDimensions: (position: Position) => Dimension;\n}\n\nexport default function DragMask({ draggedPosition, getSelectedDimensions }: Props) {\n  const { overRowIdx, idx, rowIdx } = draggedPosition;\n  if (rowIdx === overRowIdx) return null;\n\n  const isDraggedOverDown = rowIdx < overRowIdx;\n  const startRowIdx = isDraggedOverDown ? rowIdx + 1 : overRowIdx;\n  const endRowIdx = isDraggedOverDown ? overRowIdx : rowIdx - 1;\n  const className = isDraggedOverDown ? 'react-grid-cell-dragged-over-down' : 'react-grid-cell-dragged-over-up';\n\n  const dimensions = getSelectedDimensions({ idx, rowIdx: startRowIdx });\n  for (let currentRowIdx = startRowIdx + 1; currentRowIdx <= endRowIdx; currentRowIdx++) {\n    const { height } = getSelectedDimensions({ idx, rowIdx: currentRowIdx });\n    dimensions.height += height;\n  }\n\n  return (\n    <CellMask {...dimensions} className={className} />\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}