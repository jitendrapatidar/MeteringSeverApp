{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\";\nimport { Line } from 'react-chartjs-2';\nconst LineGraphData = {};\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  useEffect(() => {\n    console.log(\"useEffectData\");\n    var Mgraph = meterreadingdata.MeterGraph;\n\n    if (Mgraph != undefined) {\n      //console.log(\"labelsReadingDatetime\");\n      console.log(Mgraph.labelsReadingDatetime);\n      console.log(Mgraph.labelWH);\n      console.log(Mgraph.dataWH);\n      console.log(Mgraph.lableVARH);\n      console.log(Mgraph.dataVARH);\n      LineGraphData = {\n        labels: [\"21/03/2020 10:30 PM\", \"21/03/2020 11:00 PM\", \"21/03/2020 11:30 PM\", \"22/03/2020 12:00 AM\", \"22/03/2020 12:30 AM\", \"22/03/2020 1:00 AM\", \"22/03/2020 1:30 AM\", \"22/03/2020 2:00 AM\", \"22/03/2020 2:30 AM\", \"22/03/2020 3:00 AM\", \"22/03/2020 3:30 AM\", \"22/03/2020 4:00 AM\", \"22/03/2020 4:30 AM\", \"22/03/2020 5:00 AM\", \"22/03/2020 5:30 AM\", \"22/03/2020 6:00 AM\", \"22/03/2020 6:30 AM\", \"22/03/2020 7:00 AM\", \"22/03/2020 7:30 AM\", \"22/03/2020 8:00 AM\", \"22/03/2020 8:30 AM\", \"22/03/2020 9:00 AM\", \"22/03/2020 9:30 AM\", \"22/03/2020 10:00 AM\", \"22/03/2020 10:30 AM\", \"22/03/2020 11:00 AM\", \"22/03/2020 11:30 AM\", \"22/03/2020 12:00 PM\", \"22/03/2020 12:30 PM\", \"22/03/2020 1:00 PM\", \"22/03/2020 1:30 PM\", \"22/03/2020 2:00 PM\", \"22/03/2020 2:30 PM\", \"22/03/2020 3:00 PM\", \"22/03/2020 3:30 PM\", \"22/03/2020 4:00 PM\", \"22/03/2020 4:30 PM\", \"22/03/2020 5:00 PM\", \"22/03/2020 5:30 PM\", \"22/03/2020 6:00 PM\", \"22/03/2020 6:30 PM\", \"22/03/2020 7:00 PM\", \"22/03/2020 7:30 PM\", \"22/03/2020 8:00 PM\", \"22/03/2020 8:30 PM\", \"22/03/2020 9:00 PM\", \"22/03/2020 9:30 PM\", \"22/03/2020 10:00 PM\", \"22/03/2020 10:30 PM\", \"22/03/2020 11:00 PM\", \"22/03/2020 11:30 PM\", \"23/03/2020 12:00 AM\", \"23/03/2020 12:30 AM\", \"23/03/2020 1:00 AM\", \"23/03/2020 1:30 AM\", \"23/03/2020 2:00 AM\", \"23/03/2020 2:30 AM\", \"23/03/2020 3:00 AM\", \"23/03/2020 3:30 AM\", \"23/03/2020 4:00 AM\", \"23/03/2020 4:30 AM\", \"23/03/2020 5:00 AM\", \"23/03/2020 5:30 AM\", \"23/03/2020 6:00 AM\", \"23/03/2020 6:30 AM\", \"23/03/2020 7:00 AM\", \"23/03/2020 7:30 AM\", \"23/03/2020 8:00 AM\", \"23/03/2020 8:30 AM\", \"23/03/2020 9:00 AM\", \"23/03/2020 9:30 AM\", \"23/03/2020 10:00 AM\", \"23/03/2020 10:30 AM\", \"23/03/2020 11:00 AM\", \"23/03/2020 11:30 AM\", \"23/03/2020 12:00 PM\", \"23/03/2020 12:30 PM\", \"23/03/2020 1:00 PM\", \"23/03/2020 1:30 PM\", \"23/03/2020 2:00 PM\", \"23/03/2020 2:30 PM\", \"23/03/2020 3:00 PM\", \"23/03/2020 3:30 PM\", \"23/03/2020 4:00 PM\", \"23/03/2020 4:30 PM\", \"23/03/2020 5:00 PM\", \"23/03/2020 5:30 PM\", \"23/03/2020 6:00 PM\", \"23/03/2020 6:30 PM\", \"23/03/2020 7:00 PM\", \"23/03/2020 7:30 PM\", \"23/03/2020 8:00 PM\", \"23/03/2020 8:30 PM\", \"23/03/2020 9:00 PM\", \"23/03/2020 9:30 PM\", \"23/03/2020 10:00 PM\", \"23/03/2020 10:30 PM\", \"23/03/2020 11:00 PM\", \"23/03/2020 11:30 PM\", \"24/03/2020 12:00 AM\"],\n        datasets: [{\n          label: Mgraph.labelWH,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: Mgraph.dataWH //[65, 59, 80, 81, 56, 55, 40]\n\n        }, {\n          label: Mgraph.lableVARH,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: Mgraph.dataVARH //[65, 59, 80, 81, 56, 55, 40]\n\n        }]\n      };\n    }\n  }, [meterreadingdata]);\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\n          //history.push(\"/Signin\");\n          //console.log(data.MeterGraph);\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 6\n    }\n  }, \"Graph\"), /*#__PURE__*/React.createElement(Line, {\n    data: LineGraphData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 6\n    }\n  })));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Line","LineGraphData","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","console","log","Mgraph","MeterGraph","undefined","labelsReadingDatetime","labelWH","dataWH","lableVARH","dataVARH","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","error","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\nimport {Line} from 'react-chartjs-2';\r\nconst LineGraphData = {}\r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  \r\n  useEffect(()=>{\r\n    console.log(\"useEffectData\")\r\n   \r\n\r\n    var Mgraph=meterreadingdata.MeterGraph\r\n    if(Mgraph!=undefined)\r\n    {\r\n           \r\n             //console.log(\"labelsReadingDatetime\");\r\n             console.log(Mgraph.labelsReadingDatetime);\r\n             console.log(Mgraph.labelWH);\r\n             console.log(Mgraph.dataWH);\r\n             console.log(Mgraph.lableVARH);\r\n             console.log(Mgraph.dataVARH);\r\n\r\n               LineGraphData = {\r\n              labels: [\"21/03/2020 10:30 PM\", \"21/03/2020 11:00 PM\", \"21/03/2020 11:30 PM\", \"22/03/2020 12:00 AM\", \"22/03/2020 12:30 AM\", \"22/03/2020 1:00 AM\", \"22/03/2020 1:30 AM\", \"22/03/2020 2:00 AM\", \"22/03/2020 2:30 AM\", \"22/03/2020 3:00 AM\", \"22/03/2020 3:30 AM\", \"22/03/2020 4:00 AM\", \"22/03/2020 4:30 AM\", \"22/03/2020 5:00 AM\", \"22/03/2020 5:30 AM\", \"22/03/2020 6:00 AM\", \"22/03/2020 6:30 AM\", \"22/03/2020 7:00 AM\", \"22/03/2020 7:30 AM\", \"22/03/2020 8:00 AM\", \"22/03/2020 8:30 AM\", \"22/03/2020 9:00 AM\", \"22/03/2020 9:30 AM\", \"22/03/2020 10:00 AM\", \"22/03/2020 10:30 AM\", \"22/03/2020 11:00 AM\", \"22/03/2020 11:30 AM\", \"22/03/2020 12:00 PM\", \"22/03/2020 12:30 PM\", \"22/03/2020 1:00 PM\", \"22/03/2020 1:30 PM\", \"22/03/2020 2:00 PM\", \"22/03/2020 2:30 PM\", \"22/03/2020 3:00 PM\", \"22/03/2020 3:30 PM\", \"22/03/2020 4:00 PM\", \"22/03/2020 4:30 PM\", \"22/03/2020 5:00 PM\", \"22/03/2020 5:30 PM\", \"22/03/2020 6:00 PM\", \"22/03/2020 6:30 PM\", \"22/03/2020 7:00 PM\", \"22/03/2020 7:30 PM\", \"22/03/2020 8:00 PM\", \"22/03/2020 8:30 PM\", \"22/03/2020 9:00 PM\", \"22/03/2020 9:30 PM\", \"22/03/2020 10:00 PM\", \"22/03/2020 10:30 PM\", \"22/03/2020 11:00 PM\", \"22/03/2020 11:30 PM\", \"23/03/2020 12:00 AM\", \"23/03/2020 12:30 AM\", \"23/03/2020 1:00 AM\", \"23/03/2020 1:30 AM\", \"23/03/2020 2:00 AM\", \"23/03/2020 2:30 AM\", \"23/03/2020 3:00 AM\", \"23/03/2020 3:30 AM\", \"23/03/2020 4:00 AM\", \"23/03/2020 4:30 AM\", \"23/03/2020 5:00 AM\", \"23/03/2020 5:30 AM\", \"23/03/2020 6:00 AM\", \"23/03/2020 6:30 AM\", \"23/03/2020 7:00 AM\", \"23/03/2020 7:30 AM\", \"23/03/2020 8:00 AM\", \"23/03/2020 8:30 AM\", \"23/03/2020 9:00 AM\", \"23/03/2020 9:30 AM\", \"23/03/2020 10:00 AM\", \"23/03/2020 10:30 AM\", \"23/03/2020 11:00 AM\", \"23/03/2020 11:30 AM\", \"23/03/2020 12:00 PM\", \"23/03/2020 12:30 PM\", \"23/03/2020 1:00 PM\", \"23/03/2020 1:30 PM\", \"23/03/2020 2:00 PM\", \"23/03/2020 2:30 PM\", \"23/03/2020 3:00 PM\", \"23/03/2020 3:30 PM\", \"23/03/2020 4:00 PM\", \"23/03/2020 4:30 PM\", \"23/03/2020 5:00 PM\", \"23/03/2020 5:30 PM\", \"23/03/2020 6:00 PM\", \"23/03/2020 6:30 PM\", \"23/03/2020 7:00 PM\", \"23/03/2020 7:30 PM\", \"23/03/2020 8:00 PM\", \"23/03/2020 8:30 PM\", \"23/03/2020 9:00 PM\", \"23/03/2020 9:30 PM\", \"23/03/2020 10:00 PM\", \"23/03/2020 10:30 PM\", \"23/03/2020 11:00 PM\", \"23/03/2020 11:30 PM\", \"24/03/2020 12:00 AM\"],\r\n              datasets: [\r\n                {\r\n                  label:Mgraph.labelWH,\r\n                  fill: false,\r\n                  lineTension: 0.1,\r\n                  backgroundColor: 'rgba(75,192,192,0.4)',\r\n                  borderColor: 'rgba(75,192,192,1)',\r\n                  borderCapStyle: 'butt',\r\n                  borderDash: [],\r\n                  borderDashOffset: 0.0,\r\n                  borderJoinStyle: 'miter',\r\n                  pointBorderColor: 'rgba(75,192,192,1)',\r\n                  pointBackgroundColor: '#fff',\r\n                  pointBorderWidth: 1,\r\n                  pointHoverRadius: 5,\r\n                  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                  pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                  pointHoverBorderWidth: 2,\r\n                  pointRadius: 1,\r\n                  pointHitRadius: 10,\r\n                  data: Mgraph.dataWH//[65, 59, 80, 81, 56, 55, 40]\r\n                },\r\n                {\r\n                  label:Mgraph.lableVARH,\r\n                  fill: false,\r\n                  lineTension: 0.1,\r\n                  backgroundColor: 'rgba(75,192,192,0.4)',\r\n                  borderColor: 'rgba(75,192,192,1)',\r\n                  borderCapStyle: 'butt',\r\n                  borderDash: [],\r\n                  borderDashOffset: 0.0,\r\n                  borderJoinStyle: 'miter',\r\n                  pointBorderColor: 'rgba(75,192,192,1)',\r\n                  pointBackgroundColor: '#fff',\r\n                  pointBorderWidth: 1,\r\n                  pointHoverRadius: 5,\r\n                  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                  pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                  pointHoverBorderWidth: 2,\r\n                  pointRadius: 1,\r\n                  pointHitRadius: 10,\r\n                  data:Mgraph.dataVARH//[65, 59, 80, 81, 56, 55, 40]\r\n                }\r\n              ]\r\n            };\r\n            \r\n \r\n\r\n    }\r\n    \r\n  \r\n\r\n  },[meterreadingdata]);\r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    \r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n              //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\r\n               //history.push(\"/Signin\");\r\n             //console.log(data.MeterGraph);\r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 <input \r\n                  type=\"text\"\r\n                  value={serial}\r\n                  onChange={(e)=>setSerial(e.target.value)}\r\n                  placeholder=\"Please Enter serial\">\r\n                 </input>\r\n   \r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"graph\">\r\n     <h5>Graph</h5>\r\n     \r\n     <Line data={LineGraphData} />\r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}