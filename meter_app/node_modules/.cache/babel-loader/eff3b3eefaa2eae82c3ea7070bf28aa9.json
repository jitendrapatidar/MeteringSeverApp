{"ast":null,"code":"import React, { useRef, useState, useLayoutEffect, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport SimpleTextEditor from './SimpleTextEditor';\nimport ClickOutside from './ClickOutside';\nimport { preventDefault } from '../utils';\nexport default function EditorContainer({\n  rowIdx,\n  column,\n  row,\n  rowHeight,\n  left,\n  top,\n  onCommit,\n  onCommitCancel,\n  scrollLeft,\n  scrollTop,\n  firstEditorKeyPress: key\n}) {\n  const editorRef = useRef(null);\n  const changeCommitted = useRef(false);\n  const changeCanceled = useRef(false);\n  const [isValid, setValid] = useState(true);\n  const prevScrollLeft = useRef(scrollLeft);\n  const prevScrollTop = useRef(scrollTop);\n  const isUnmounting = useRef(false);\n  const getInputNode = useCallback(() => {\n    var _a;\n\n    return (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.getInputNode();\n  }, []);\n  const commitCancel = useCallback(() => {\n    changeCanceled.current = true;\n    onCommitCancel();\n  }, [onCommitCancel]);\n  useLayoutEffect(() => {\n    const inputNode = getInputNode();\n\n    if (inputNode instanceof HTMLElement) {\n      inputNode.focus();\n    }\n\n    if (inputNode instanceof HTMLInputElement) {\n      inputNode.select();\n    }\n  }, [getInputNode]); // close editor when scrolling\n\n  useEffect(() => {\n    if (scrollLeft !== prevScrollLeft.current || scrollTop !== prevScrollTop.current) {\n      commitCancel();\n    }\n  }, [commitCancel, scrollLeft, scrollTop]);\n  useEffect(() => () => {\n    isUnmounting.current = true;\n  }, []); // commit changes when editor is closed\n\n  useEffect(() => () => {\n    if (isUnmounting.current && !changeCommitted.current && !changeCanceled.current) {\n      commit();\n    }\n  });\n\n  function getInitialValue() {\n    const value = row[column.key];\n\n    if (key === 'Delete' || key === 'Backspace') {\n      return '';\n    }\n\n    if (key === 'Enter') {\n      return value;\n    }\n\n    return key || value;\n  }\n\n  function isCaretAtBeginningOfInput() {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement && inputNode.selectionEnd === 0;\n  }\n\n  function isCaretAtEndOfInput() {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement && inputNode.selectionStart === inputNode.value.length;\n  }\n\n  function editorHasResults() {\n    var _a, _b, _c;\n\n    return (_c = (_b = (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.hasResults) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : false;\n  }\n\n  function editorIsSelectOpen() {\n    var _a, _b, _c;\n\n    return (_c = (_b = (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.isSelectOpen) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : false;\n  }\n\n  function isNewValueValid(value) {\n    var _a, _b;\n\n    const isValid = (_b = (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.validate) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n\n    if (typeof isValid === 'boolean') {\n      setValid(isValid);\n      return isValid;\n    }\n\n    return true;\n  }\n\n  function preventDefaultNavigation(key) {\n    return key === 'ArrowLeft' && !isCaretAtBeginningOfInput() || key === 'ArrowRight' && !isCaretAtEndOfInput() || key === 'Escape' && editorIsSelectOpen() || ['ArrowUp', 'ArrowDown'].includes(key) && editorHasResults();\n  }\n\n  function commit() {\n    if (!editorRef.current) return;\n    const updated = editorRef.current.getValue();\n\n    if (isNewValueValid(updated)) {\n      changeCommitted.current = true;\n      const cellKey = column.key;\n      onCommit({\n        cellKey,\n        rowIdx,\n        updated\n      });\n    }\n  }\n\n  function onKeyDown(e) {\n    if (preventDefaultNavigation(e.key)) {\n      e.stopPropagation();\n    } else if (['Enter', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      commit();\n    } else if (e.key === 'Escape') {\n      commitCancel();\n    }\n  }\n\n  function createEditor() {\n    // return custom column editor or SimpleEditor if none specified\n    if (column.editor) {\n      return React.createElement(column.editor, {\n        ref: editorRef,\n        column: column,\n        value: getInitialValue(),\n        row: row,\n        height: rowHeight,\n        onCommit: commit,\n        onCommitCancel: commitCancel,\n        onOverrideKeyDown: onKeyDown\n      });\n    }\n\n    return React.createElement(SimpleTextEditor, {\n      ref: editorRef,\n      column: column,\n      value: getInitialValue(),\n      onCommit: commit\n    });\n  }\n\n  const className = classNames('rdg-editor-container', {\n    'rdg-editor-invalid': !isValid\n  });\n  return React.createElement(ClickOutside, {\n    onClickOutside: commit\n  }, React.createElement(\"div\", {\n    className: className,\n    style: {\n      height: rowHeight,\n      width: column.width,\n      left,\n      top\n    },\n    onKeyDown: onKeyDown,\n    onContextMenu: preventDefault\n  }, createEditor()));\n}","map":{"version":3,"sources":["../../src/editors/EditorContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { KeyboardEvent, useRef, useState, useLayoutEffect, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\n\nimport { CalculatedColumn, Editor, CommitEvent } from '../common/types';\nimport SimpleTextEditor from './SimpleTextEditor';\nimport ClickOutside from './ClickOutside';\nimport { InteractionMasksProps } from '../masks/InteractionMasks';\nimport { preventDefault } from '../utils';\n\ntype SharedInteractionMasksProps<R, SR> = Pick<InteractionMasksProps<R, SR>,\n  | 'scrollLeft'\n  | 'scrollTop'\n  | 'rowHeight'\n>;\n\nexport interface EditorContainerProps<R, SR> extends SharedInteractionMasksProps<R, SR> {\n  rowIdx: number;\n  row: R;\n  column: CalculatedColumn<R, SR>;\n  onCommit: (e: CommitEvent) => void;\n  onCommitCancel: () => void;\n  firstEditorKeyPress: string | null;\n  top: number;\n  left: number;\n}\n\nexport default function EditorContainer<R, SR>({\n  rowIdx,\n  column,\n  row,\n  rowHeight,\n  left,\n  top,\n  onCommit,\n  onCommitCancel,\n  scrollLeft,\n  scrollTop,\n  firstEditorKeyPress: key\n}: EditorContainerProps<R, SR>) {\n  const editorRef = useRef<Editor>(null);\n  const changeCommitted = useRef(false);\n  const changeCanceled = useRef(false);\n  const [isValid, setValid] = useState(true);\n  const prevScrollLeft = useRef(scrollLeft);\n  const prevScrollTop = useRef(scrollTop);\n  const isUnmounting = useRef(false);\n\n  const getInputNode = useCallback(() => editorRef.current?.getInputNode(), []);\n\n  const commitCancel = useCallback(() => {\n    changeCanceled.current = true;\n    onCommitCancel();\n  }, [onCommitCancel]);\n\n  useLayoutEffect(() => {\n    const inputNode = getInputNode();\n\n    if (inputNode instanceof HTMLElement) {\n      inputNode.focus();\n    }\n    if (inputNode instanceof HTMLInputElement) {\n      inputNode.select();\n    }\n  }, [getInputNode]);\n\n  // close editor when scrolling\n  useEffect(() => {\n    if (scrollLeft !== prevScrollLeft.current || scrollTop !== prevScrollTop.current) {\n      commitCancel();\n    }\n  }, [commitCancel, scrollLeft, scrollTop]);\n\n  useEffect(() => () => {\n    isUnmounting.current = true;\n  }, []);\n\n  // commit changes when editor is closed\n  useEffect(() => () => {\n    if (isUnmounting.current && !changeCommitted.current && !changeCanceled.current) {\n      commit();\n    }\n  });\n\n  function getInitialValue() {\n    const value = row[column.key as keyof R];\n    if (key === 'Delete' || key === 'Backspace') {\n      return '';\n    }\n    if (key === 'Enter') {\n      return value;\n    }\n\n    return key || value;\n  }\n\n  function isCaretAtBeginningOfInput(): boolean {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement\n      && inputNode.selectionEnd === 0;\n  }\n\n  function isCaretAtEndOfInput(): boolean {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement\n      && inputNode.selectionStart === inputNode.value.length;\n  }\n\n  function editorHasResults(): boolean {\n    return editorRef.current?.hasResults?.() ?? false;\n  }\n\n  function editorIsSelectOpen(): boolean {\n    return editorRef.current?.isSelectOpen?.() ?? false;\n  }\n\n  function isNewValueValid(value: unknown): boolean {\n    const isValid = editorRef.current?.validate?.(value);\n    if (typeof isValid === 'boolean') {\n      setValid(isValid);\n      return isValid;\n    }\n    return true;\n  }\n\n  function preventDefaultNavigation(key: string): boolean {\n    return (key === 'ArrowLeft' && !isCaretAtBeginningOfInput())\n      || (key === 'ArrowRight' && !isCaretAtEndOfInput())\n      || (key === 'Escape' && editorIsSelectOpen())\n      || (['ArrowUp', 'ArrowDown'].includes(key) && editorHasResults());\n  }\n\n  function commit(): void {\n    if (!editorRef.current) return;\n    const updated = editorRef.current.getValue();\n    if (isNewValueValid(updated)) {\n      changeCommitted.current = true;\n      const cellKey = column.key;\n      onCommit({ cellKey, rowIdx, updated });\n    }\n  }\n\n  function onKeyDown(e: KeyboardEvent) {\n    if (preventDefaultNavigation(e.key)) {\n      e.stopPropagation();\n    } else if (['Enter', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      commit();\n    } else if (e.key === 'Escape') {\n      commitCancel();\n    }\n  }\n\n  function createEditor() {\n    // return custom column editor or SimpleEditor if none specified\n    if (column.editor) {\n      return (\n        <column.editor\n          ref={editorRef}\n          column={column}\n          value={getInitialValue() as R[keyof R & string] & R[keyof R & number] & R[keyof R & symbol]}\n          row={row}\n          height={rowHeight}\n          onCommit={commit}\n          onCommitCancel={commitCancel}\n          onOverrideKeyDown={onKeyDown}\n        />\n      );\n    }\n\n    return (\n      <SimpleTextEditor\n        ref={editorRef as unknown as React.RefObject<SimpleTextEditor>}\n        column={column}\n        value={getInitialValue() as string}\n        onCommit={commit}\n      />\n    );\n  }\n\n  const className = classNames('rdg-editor-container', {\n    'rdg-editor-invalid': !isValid\n  });\n\n  return (\n    <ClickOutside onClickOutside={commit}>\n      <div\n        className={className}\n        style={{ height: rowHeight, width: column.width, left, top }}\n        onKeyDown={onKeyDown}\n        onContextMenu={preventDefault}\n      >\n        {createEditor()}\n      </div>\n    </ClickOutside>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}