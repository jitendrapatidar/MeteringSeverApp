{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\";\nimport { Line } from 'react-chartjs-2';\nimport { Bar } from 'react-chartjs-2';\nimport DataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  const [items, setItems] = React.useState([]);\n  const [MeterGraph, setMeterGraph] = useState({});\n  const [Bargraph, setBargraph] = useState({});\n  const columns = [{\n    key: 'Serial',\n    name: 'Serial'\n  }, {\n    key: 'ReadingDateTimeUTC',\n    name: 'ReadingDateTimeUTC'\n  }, {\n    key: 'WH',\n    name: 'WH'\n  }, {\n    key: 'VARH',\n    name: 'VARH'\n  }];\n  const MeteringData = [];\n  useEffect(() => {\n    if (meterreadingdata != undefined) {\n      var Mgraph = meterreadingdata.MeterGraph;\n      var Metering = meterreadingdata.Metering;\n\n      if (Array.isArray(Metering)) {\n        Metering.forEach(element => MeteringData.push(element));\n        setItems(MeteringData);\n      }\n\n      if (Mgraph != undefined) {\n        var gVale = {\n          labels: Mgraph.labelsReadingDatetime,\n          datasets: [{\n            label: Mgraph.labelWH,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: Mgraph.dataWH\n          }, {\n            label: Mgraph.lableVARH,\n            backgroundColor: 'rgba(80,152,182,2)',\n            borderColor: 'rgba(0,3,3,1)',\n            borderWidth: 2,\n            data: Mgraph.dataVARH\n          }]\n        };\n        var state = {\n          labels: Mgraph.labelsReadingDatetime,\n          datasets: [{\n            label: Mgraph.labelWH,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: Mgraph.dataWH\n          }, {\n            label: Mgraph.lableVARH,\n            backgroundColor: 'rgba(85,100,200,5)',\n            borderColor: 'rgba(10,8,15,55)',\n            borderWidth: 2,\n            data: Mgraph.dataVARH\n          }]\n        };\n        setBargraph(state);\n        setMeterGraph(gVale);\n      }\n    }\n  }, [meterreadingdata]);\n\n  const handleChange = event => {\n    setBargraph({});\n    setMeterGraph({});\n    setItems([]);\n    setItems(\"\");\n    setSerial(event.target.value);\n  };\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    setBargraph({});\n    setMeterGraph({});\n    setItems([]);\n    setItems(\"\");\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: handleChange,\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"showtalbe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    columns: columns,\n    rows: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, \"Bar\"), /*#__PURE__*/React.createElement(Bar, {\n    data: Bargraph,\n    options: {\n      title: {\n        display: true,\n        text: 'Meter Reading ',\n        fontSize: 18\n      },\n      legend: {\n        display: true,\n        position: 'right'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: MeterGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Line","Bar","DataGrid","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","items","setItems","MeterGraph","setMeterGraph","Bargraph","setBargraph","columns","key","name","MeteringData","undefined","Mgraph","Metering","Array","isArray","forEach","element","push","gVale","labels","labelsReadingDatetime","datasets","label","labelWH","backgroundColor","borderColor","borderWidth","data","dataWH","lableVARH","dataVARH","state","handleChange","event","target","value","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","error","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n \r\n\r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  const [items, setItems] = React.useState([]);\r\n  const[MeterGraph,setMeterGraph] =useState({})\r\n  const[Bargraph,setBargraph] =useState({})\r\n  \r\n  const columns = [\r\n    { key: 'Serial', name: 'Serial' },\r\n    { key: 'ReadingDateTimeUTC', name: 'ReadingDateTimeUTC' },\r\n    { key: 'WH', name: 'WH' },\r\n    { key: 'VARH', name: 'VARH' }\r\n  ];\r\n  const MeteringData=[]\r\n\r\n  useEffect(()=>{\r\n   \r\n    if(meterreadingdata!=undefined)\r\n    {   \r\n      \r\n     \r\n\r\n      var Mgraph= meterreadingdata.MeterGraph;\r\n      var Metering =meterreadingdata.Metering;\r\n       \r\n             if(Array.isArray(Metering)){\r\n                Metering.forEach(element =>  \r\n                MeteringData.push(element));\r\n               setItems(MeteringData);\r\n             }\r\n            \r\n             if(Mgraph!=undefined)\r\n             {\r\n             \r\n                        var gVale={\r\n                          labels: Mgraph.labelsReadingDatetime,\r\n                          datasets: [\r\n                            {\r\n                              label: Mgraph.labelWH,\r\n                              backgroundColor: 'rgba(75,192,192,1)',\r\n                              borderColor: 'rgba(0,0,0,1)',\r\n                              borderWidth: 2,\r\n                              data: Mgraph.dataWH\r\n                            },\r\n                            {\r\n                              label: Mgraph.lableVARH,\r\n                              backgroundColor: 'rgba(80,152,182,2)',\r\n                              borderColor: 'rgba(0,3,3,1)',\r\n                              borderWidth: 2,\r\n                              data: Mgraph.dataVARH\r\n                            }\r\n                          ]\r\n                        }\r\n\r\n                        var state = {\r\n                          labels: Mgraph.labelsReadingDatetime,\r\n                          datasets: [\r\n                            {\r\n                              label: Mgraph.labelWH,\r\n                              backgroundColor: 'rgba(75,192,192,1)',\r\n                              borderColor: 'rgba(0,0,0,1)',\r\n                              borderWidth: 2,\r\n                              data: Mgraph.dataWH\r\n                            },\r\n                            {\r\n                              label: Mgraph.lableVARH,\r\n                              backgroundColor: 'rgba(85,100,200,5)',\r\n                              borderColor: 'rgba(10,8,15,55)',\r\n                              borderWidth: 2,\r\n                              data: Mgraph.dataVARH\r\n                            }\r\n                          ]\r\n                        }\r\n\r\n                        \r\n               setBargraph(state);\r\n               setMeterGraph(gVale);\r\n               \r\n            \r\n             }\r\n\r\n             \r\n             \r\n    }\r\n  \r\n  },[meterreadingdata]);\r\n \r\n  const handleChange=(event)=> {\r\n    \r\n    \r\n    setBargraph({});\r\n    setMeterGraph({});\r\n    setItems([])\r\n    setItems(\"\");\r\n    setSerial(event.target.value)\r\n  }\r\n\r\n \r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    setBargraph({});\r\n    setMeterGraph({});\r\n    setItems([])\r\n    setItems(\"\");\r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n            \r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 \r\n                 <input type=\"text\" value={serial} onChange={handleChange}\r\n                  placeholder=\"Please Enter serial\"/>\r\n\r\n\r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"showtalbe\">\r\n \r\n  \r\n     <DataGrid  columns={columns}  rows={items}/>  \r\n\r\n </div>\r\n <div className=\"graph\">\r\n <div><h4>Bar</h4>\r\n        <Bar\r\n          data={Bargraph}\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'Meter Reading ',\r\n              fontSize:18\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Line data={MeterGraph}></Line>  \r\n     </div>\r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}