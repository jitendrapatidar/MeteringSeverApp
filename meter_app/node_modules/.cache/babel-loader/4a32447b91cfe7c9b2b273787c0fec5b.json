{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\";\nimport { Line } from 'react-chartjs-2';\nimport DataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  const [MeterGraph, setMeterGraph] = useState(\"\");\n  const [Metering, setMetering] = useState(\"\");\n  const [items, setItems] = React.useState([{\n    \"Serial\": \"\",\n    \"ReadingDateTimeUTC\": \"\",\n    \"WH\": '',\n    \"VARH\": ''\n  }]);\n  const columns = [{\n    key: 'Serial',\n    name: 'Serial'\n  }, {\n    key: 'ReadingDateTimeUTC',\n    name: 'ReadingDateTimeUTC'\n  }, {\n    key: 'WH',\n    name: 'WH'\n  }, {\n    key: 'VARH',\n    name: 'VARH'\n  }];\n  const rows = [{\n    \"Serial\": \"\",\n    \"ReadingDateTimeUTC\": \"\",\n    \"WH\": '',\n    \"VARH\": ''\n  }];\n  const MeteringData = [{\n    \"Serial\": \"\",\n    \"ReadingDateTimeUTC\": \"\",\n    \"WH\": '',\n    \"VARH\": ''\n  }];\n  useEffect(() => {\n    console.log(\"useEffectData\");\n\n    if (meterreadingdata != undefined) {\n      var Mgraph = meterreadingdata.MeterGraph;\n      var Metering = meterreadingdata.Metering;\n      var MeterReading = meterreadingdata.MeterReading; //setMeterGraph(Mgraph);\n      //console.log(\"labelsReadingDatetime\");\n      //console.log(Mgraph.labelsReadingDatetime);\n      //console.log(Mgraph);\n      //console.log(Metering);\n\n      if (Array.isArray(Metering)) {\n        console.log(\"isArray\");\n        Metering.forEach(element => // setItems.push(element)\n        MeteringData.push(element));\n        setItems.push(MeteringData);\n        console.log(items);\n      }\n\n      setMeterGraph(Mgraph);\n      setMetering(Metering); //  setLineGraphData(GraphData);\n    }\n  }, [meterreadingdata]);\n\n  const renderResultRows = data => {\n    var self = this;\n    return data.map(function (meter) {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        \"data-title\": \"Serial\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }, meter.Serial), /*#__PURE__*/React.createElement(\"td\", {\n        \"data-title\": \"ReadingDateTimeUTC\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, meter.ReadingDateTimeUTC), /*#__PURE__*/React.createElement(\"td\", {\n        \"data-title\": \"WH\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, meter.WH), /*#__PURE__*/React.createElement(\"td\", {\n        \"data-title\": \"VARH\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }, meter.VARH));\n    }.bind(this));\n  };\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\n          //history.push(\"/Signin\");\n          //console.log(data.MeterGraph);\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"showtalbe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    columns: columns,\n    rows: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 6\n    }\n  }, \"Graph\")));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Line","DataGrid","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","MeterGraph","setMeterGraph","Metering","setMetering","items","setItems","columns","key","name","rows","MeteringData","console","log","undefined","Mgraph","MeterReading","Array","isArray","forEach","element","push","renderResultRows","data","self","map","meter","Serial","ReadingDateTimeUTC","WH","VARH","bind","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","error","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\nimport {Line} from 'react-chartjs-2';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n \r\n\r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  const[MeterGraph,setMeterGraph] =useState(\"\")\r\n  const[Metering,setMetering] =useState(\"\")\r\n  const [items, setItems] = React.useState([ {\r\n    \"Serial\": \"\",\r\n    \"ReadingDateTimeUTC\": \"\",\r\n    \"WH\": '',\r\n    \"VARH\": ''\r\n}]);\r\n\r\n\r\n  \r\n  const columns = [\r\n    \r\n    { key: 'Serial', name: 'Serial' },\r\n    { key: 'ReadingDateTimeUTC', name: 'ReadingDateTimeUTC' },\r\n    { key: 'WH', name: 'WH' },\r\n    { key: 'VARH', name: 'VARH' }\r\n  ];\r\n  \r\n  const rows = [\r\n    {\r\n      \"Serial\": \"\",\r\n      \"ReadingDateTimeUTC\": \"\",\r\n      \"WH\": '',\r\n      \"VARH\": ''\r\n  }];\r\n\r\nconst MeteringData=[{\r\n  \"Serial\": \"\",\r\n  \"ReadingDateTimeUTC\": \"\",\r\n  \"WH\": '',\r\n  \"VARH\": ''\r\n}]\r\n\r\n \r\n\r\n\r\n  useEffect(()=>{\r\n    console.log(\"useEffectData\")\r\n   \r\n    if(meterreadingdata!=undefined)\r\n    {\r\n\r\n      var Mgraph=meterreadingdata.MeterGraph\r\n      var Metering =meterreadingdata.Metering\r\n      var MeterReading =meterreadingdata.MeterReading\r\n\r\n            //setMeterGraph(Mgraph);\r\n           \r\n             //console.log(\"labelsReadingDatetime\");\r\n             //console.log(Mgraph.labelsReadingDatetime);\r\n             //console.log(Mgraph);\r\n             //console.log(Metering);\r\n           \r\n             if(Array.isArray(Metering)){\r\n              console.log(\"isArray\");\r\n\r\n              Metering.forEach(element =>  \r\n                // setItems.push(element)\r\n                MeteringData.push(element)\r\n               );\r\n               setItems.push(MeteringData);\r\n               console.log(items);\r\n             }\r\n\r\n             \r\n\r\n          \r\n            \r\n             setMeterGraph(Mgraph)\r\n             setMetering(Metering)\r\n             \r\n          \r\n            \r\n\r\n            \r\n\r\n          //  setLineGraphData(GraphData);\r\n \r\n\r\n    }\r\n  \r\n  },[meterreadingdata]);\r\n \r\n\r\n  const renderResultRows=(data)=>{\r\n    var self = this;\r\n    return data.map(function(meter) \r\n    {\r\n        return (\r\n            <tr>\r\n                <td data-title=\"Serial\">{meter.Serial}</td>\r\n                <td data-title=\"ReadingDateTimeUTC\">{meter.ReadingDateTimeUTC}</td>\r\n                <td data-title=\"WH\">{meter.WH}</td>\r\n                <td data-title=\"VARH\">{meter.VARH}</td>\r\n            </tr>\r\n        );\r\n    }.bind(this));\r\n\r\n}\r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    \r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n              //M.toast({html:data.message ,classes:\"#00e676 green accent-3\"})\r\n               //history.push(\"/Signin\");\r\n             //console.log(data.MeterGraph);\r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 <input \r\n                  type=\"text\"\r\n                  value={serial}\r\n                  onChange={(e)=>setSerial(e.target.value)}\r\n                  placeholder=\"Please Enter serial\">\r\n                 </input>\r\n   \r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"showtalbe\">\r\n \r\n  \r\n     <DataGrid  columns={columns}  rows={items}/>  \r\n\r\n </div>\r\n <div className=\"graph\">\r\n     <h5>Graph</h5>\r\n     {/* <Line data={MeterGraph}></Line> */}\r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}