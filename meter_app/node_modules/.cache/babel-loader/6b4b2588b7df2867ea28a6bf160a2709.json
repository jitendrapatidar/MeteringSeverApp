{"ast":null,"code":"var _jsxFileName = \"E:\\\\NodeJsProjects\\\\CandidateAssignment\\\\Meter\\\\meter_app\\\\src\\\\components\\\\screen\\\\Meter.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport M from \"materialize-css\";\nimport { Line } from 'react-chartjs-2';\nimport DataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\n\nconst Meter = () => {\n  const history = useHistory();\n  const [serial, setSerial] = useState(\"\");\n  const [meterreadingdata, setMeterreadingdata] = useState(\"\");\n  const [items, setItems] = React.useState([]);\n  const [MeterGraph, setMeterGraph] = useState({});\n  const [Metering, setMetering] = useState(\"\");\n  const columns = [{\n    key: 'Serial',\n    name: 'Serial'\n  }, {\n    key: 'ReadingDateTimeUTC',\n    name: 'ReadingDateTimeUTC'\n  }, {\n    key: 'WH',\n    name: 'WH'\n  }, {\n    key: 'VARH',\n    name: 'VARH'\n  }];\n  const MeteringData = [];\n  useEffect(() => {\n    console.log(\"useEffectData\");\n\n    if (meterreadingdata != undefined) {\n      var Mgraph = meterreadingdata.MeterGraph;\n      var Metering = meterreadingdata.Metering; //var MeterReading =meterreadingdata.MeterReading\n\n      console.log(\"Mgraph    \" + Mgraph);\n\n      if (Array.isArray(Metering)) {\n        Metering.forEach(element => MeteringData.push(element));\n        setItems(MeteringData);\n      }\n\n      if (Array.isArray(Mgraph)) {\n        // Line 49:17:  'MeteringData' is not defined  no-undef\n        // Line 51:25:  'MeteringData' is not defined  no-undef\n        // Line 87:14:  'setMetering' is not defined   no-undef\n        console.log(\"isArray\");\n        debugger;\n        var gVale = {\n          labels: Mgraph.labelsReadingDatetime,\n          datasets: [{\n            label: Mgraph.labelWH,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: Mgraph.dataWH\n          }, {\n            label: Mgraph.lableVARH,\n            backgroundColor: 'rgba(80,152,182,2)',\n            borderColor: 'rgba(0,3,3,1)',\n            borderWidth: 2,\n            data: Mgraph.dataVARH\n          }]\n        };\n        setMeterGraph(gVale);\n        console.log(\"MeterGraph\");\n        console.log(gVale);\n      } //setMeterGraph(Mgraph)\n      //setMetering(Metering)\n\n    }\n  }, [meterreadingdata]);\n\n  const handleChange = event => {\n    setItems(\"\");\n    setSerial(event.target.value); //this.setSerial({value: event.target.value});\n  };\n\n  const SearchSerial = () => {\n    var IsValid = true;\n    setItems(\"\");\n    var ToastMessage = \"\";\n\n    if (serial == \"\" || serial.length == 0 || serial == undefined) {\n      ToastMessage = \"\";\n      IsValid = false;\n      ToastMessage = \"serial is requied<br>\";\n    }\n\n    if (serial.length > 0 && (serial.length < 11 || serial.length > 11)) {\n      IsValid = false;\n      ToastMessage += \"minlength   characters 11 required<br>\";\n    }\n\n    if (IsValid == false) {\n      var Msg = ToastMessage;\n      ToastMessage = \"\";\n      return M.toast({\n        html: Msg,\n        classes: \"#c62828 red darken-3\"\n      });\n    }\n\n    if (IsValid) {\n      fetch(\"/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          serial\n        })\n      }).then(res => res.json()).then(data => {\n        setMeterreadingdata(\"\");\n\n        if (data.error) {\n          M.toast({\n            html: data.error,\n            classes: \"#c62828 red darken-3\"\n          });\n        } else {\n          setMeterreadingdata(data);\n        }\n      });\n    } //is valid if\n\n  }; //serach functions.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card search input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 18\n    }\n  }, \"Search Meter Reading\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: serial,\n    onChange: handleChange,\n    placeholder: \"Please Enter serial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn waves-effect waves-light #1976d2 blue darken-1\",\n    onClick: () => SearchSerial(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"showtalbe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    columns: columns,\n    rows: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 6\n    }\n  }, \"Graph\"), /*#__PURE__*/React.createElement(Line, {\n    data: MeterGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 6\n    }\n  })));\n};\n\nexport default Meter;","map":{"version":3,"sources":["E:/NodeJsProjects/CandidateAssignment/Meter/meter_app/src/components/screen/Meter.js"],"names":["React","useState","useEffect","Link","useHistory","M","Line","DataGrid","Meter","history","serial","setSerial","meterreadingdata","setMeterreadingdata","items","setItems","MeterGraph","setMeterGraph","Metering","setMetering","columns","key","name","MeteringData","console","log","undefined","Mgraph","Array","isArray","forEach","element","push","gVale","labels","labelsReadingDatetime","datasets","label","labelWH","backgroundColor","borderColor","borderWidth","data","dataWH","lableVARH","dataVARH","handleChange","event","target","value","SearchSerial","IsValid","ToastMessage","length","Msg","toast","html","classes","fetch","method","headers","body","JSON","stringify","then","res","json","error"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from \"materialize-css\"\r\nimport {Line} from 'react-chartjs-2';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n \r\n\r\nconst Meter =()=>\r\n{\r\n  const history=useHistory();\r\n  const[serial,setSerial] =useState(\"\")\r\n  const[meterreadingdata,setMeterreadingdata] =useState(\"\")\r\n  const [items, setItems] = React.useState([]);\r\n  const[MeterGraph,setMeterGraph] =useState({})\r\n  const[Metering,setMetering] =useState(\"\")\r\n  \r\n  const columns = [\r\n    { key: 'Serial', name: 'Serial' },\r\n    { key: 'ReadingDateTimeUTC', name: 'ReadingDateTimeUTC' },\r\n    { key: 'WH', name: 'WH' },\r\n    { key: 'VARH', name: 'VARH' }\r\n  ];\r\n  const MeteringData=[]\r\n\r\n  useEffect(()=>{\r\n    console.log(\"useEffectData\")\r\n   \r\n    if(meterreadingdata!=undefined)\r\n    {\r\n\r\n      var Mgraph=meterreadingdata.MeterGraph\r\n      var Metering =meterreadingdata.Metering\r\n          //var MeterReading =meterreadingdata.MeterReading\r\n          console.log(\"Mgraph    \"+ Mgraph);\r\n             if(Array.isArray(Metering)){\r\n                Metering.forEach(element =>  \r\n                MeteringData.push(element));\r\n               setItems(MeteringData);\r\n             }\r\n\r\n             if(Array.isArray(Mgraph))\r\n             {\r\n              \r\n              // Line 49:17:  'MeteringData' is not defined  no-undef\r\n              // Line 51:25:  'MeteringData' is not defined  no-undef\r\n              // Line 87:14:  'setMetering' is not defined   no-undef\r\n              console.log(\"isArray\");\r\n              debugger;\r\n                        var gVale={\r\n                          labels: Mgraph.labelsReadingDatetime,\r\n                          datasets: [\r\n                            {\r\n                              label: Mgraph.labelWH,\r\n                              backgroundColor: 'rgba(75,192,192,1)',\r\n                              borderColor: 'rgba(0,0,0,1)',\r\n                              borderWidth: 2,\r\n                              data: Mgraph.dataWH\r\n                            },\r\n                            {\r\n                              label: Mgraph.lableVARH,\r\n                              backgroundColor: 'rgba(80,152,182,2)',\r\n                              borderColor: 'rgba(0,3,3,1)',\r\n                              borderWidth: 2,\r\n                              data: Mgraph.dataVARH\r\n                            }\r\n                          ]\r\n                        }\r\n\r\n               setMeterGraph(gVale);\r\n              console.log(\"MeterGraph\");\r\n               console.log(gVale);\r\n             }\r\n\r\n             //setMeterGraph(Mgraph)\r\n             //setMetering(Metering)\r\n             \r\n    }\r\n  \r\n  },[meterreadingdata]);\r\n \r\n  const handleChange=(event)=> {\r\n     \r\n    \r\n    setItems(\"\");\r\n    setSerial(event.target.value)\r\n       //this.setSerial({value: event.target.value});\r\n  }\r\n\r\n \r\n\r\n  const SearchSerial=()=>{\r\n    var IsValid=true;\r\n    setItems(\"\");\r\n    var ToastMessage=\"\";\r\n    if(serial==\"\" || serial.length==0 || serial==undefined)\r\n    {\r\n      ToastMessage=\"\";\r\n      IsValid=false;\r\n      ToastMessage= \"serial is requied<br>\"\r\n    }\r\n    if(serial.length>0 && (serial.length<11 || serial.length>11))\r\n    {\r\n      IsValid=false;\r\n      ToastMessage+= \"minlength   characters 11 required<br>\"\r\n    }\r\n    if(IsValid==false)\r\n    {\r\n       var Msg =ToastMessage;\r\n       ToastMessage=\"\";\r\n       return M.toast({html:Msg,classes:\"#c62828 red darken-3\"});\r\n       \r\n    }\r\n    if(IsValid)\r\n    {\r\n\r\n        fetch(\"/search\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({serial})\r\n           }).then(res=>res.json())\r\n          .then(data=>{\r\n            setMeterreadingdata(\"\")\r\n            if(data.error){\r\n              M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n              \r\n            }\r\n            else\r\n            {\r\n              \r\n              setMeterreadingdata(data)\r\n\r\n            }\r\n          });\r\n\r\n\r\n\r\n    }//is valid if\r\n }//serach functions.\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n<div className=\"search\">\r\n               <div className=\"card search input-field\">\r\n                 <h2>Search Meter Reading</h2>\r\n                 \r\n                 <input type=\"text\" value={serial} onChange={handleChange}\r\n                  placeholder=\"Please Enter serial\"/>\r\n\r\n\r\n                <button className=\"btn waves-effect waves-light #1976d2 blue darken-1\"\r\n                onClick={()=>SearchSerial()}>\r\n                    Search\r\n                </button>\r\n                  \r\n               </div>\r\n</div>\r\n\r\n <div className=\"showtalbe\">\r\n \r\n  \r\n     <DataGrid  columns={columns}  rows={items}/>  \r\n\r\n </div>\r\n <div className=\"graph\">\r\n     <h5>Graph</h5>\r\n     <Line data={MeterGraph}></Line>  \r\n </div>\r\n</div>\r\n\r\n\r\n\r\n \r\n\r\n)\r\n\r\n};\r\nexport default Meter"]},"metadata":{},"sourceType":"module"}