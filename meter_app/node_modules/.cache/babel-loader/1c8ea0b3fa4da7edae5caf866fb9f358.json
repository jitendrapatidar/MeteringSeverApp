{"ast":null,"code":"import React, { forwardRef, memo } from 'react';\nimport classNames from 'classnames';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Cell({\n  className,\n  column,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  row,\n  rowIdx,\n  eventBus,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onDragOver,\n  ...props\n}, ref) {\n  function selectCell(openEditor) {\n    eventBus.dispatch('SELECT_CELL', {\n      idx: column.idx,\n      rowIdx\n    }, openEditor);\n  }\n\n  function handleCellClick() {\n    selectCell();\n    onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(rowIdx, row, column);\n  }\n\n  function handleCellContextMenu() {\n    selectCell();\n  }\n\n  function handleCellDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked, isShiftClick) {\n    eventBus.dispatch('SELECT_ROW', {\n      rowIdx,\n      checked,\n      isShiftClick\n    });\n  }\n\n  const {\n    cellClass\n  } = column;\n  className = classNames('rdg-cell', {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n  }, typeof cellClass === 'function' ? cellClass(row) : cellClass, className);\n  return React.createElement(\"div\", Object.assign({\n    ref: ref,\n    className: className,\n    style: {\n      width: column.width,\n      left: column.left\n    },\n    onClick: wrapEvent(handleCellClick, onClick),\n    onDoubleClick: wrapEvent(handleCellDoubleClick, onDoubleClick),\n    onContextMenu: wrapEvent(handleCellContextMenu, onContextMenu),\n    onDragOver: wrapEvent(preventDefault, onDragOver)\n  }, props), React.createElement(column.formatter, {\n    column: column,\n    rowIdx: rowIdx,\n    row: row,\n    isRowSelected: isRowSelected,\n    onRowSelectionChange: onRowSelectionChange\n  }));\n}\n\nexport default memo(forwardRef(Cell));","map":{"version":3,"sources":["../src/Cell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,UAAhB,EAA4B,IAA5B,QAAwC,OAAxC;AACA,OAAO,UAAP,MAAuB,YAAvB;AAGA,SAAS,cAAT,EAAyB,SAAzB,QAA0C,SAA1C;;AAEA,SAAS,IAAT,CAAqB;AACnB,EAAA,SADmB;AAEnB,EAAA,MAFmB;AAGnB,EAAA,aAHmB;AAInB,EAAA,qBAJmB;AAKnB,EAAA,GALmB;AAMnB,EAAA,MANmB;AAOnB,EAAA,QAPmB;AAQnB,EAAA,UARmB;AASnB,EAAA,OATmB;AAUnB,EAAA,aAVmB;AAWnB,EAAA,aAXmB;AAYnB,EAAA,UAZmB;AAanB,KAAG;AAbgB,CAArB,EAc6B,GAd7B,EAc2D;AACzD,WAAS,UAAT,CAAoB,UAApB,EAAwC;AACtC,IAAA,QAAQ,CAAC,QAAT,CAAkB,aAAlB,EAAiC;AAAE,MAAA,GAAG,EAAE,MAAM,CAAC,GAAd;AAAmB,MAAA;AAAnB,KAAjC,EAA8D,UAA9D;AACD;;AAED,WAAS,eAAT,GAAwB;AACtB,IAAA,UAAU;AACV,IAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAG,MAAH,EAAW,GAAX,EAAgB,MAAhB,CAAV;AACD;;AAED,WAAS,qBAAT,GAA8B;AAC5B,IAAA,UAAU;AACX;;AAED,WAAS,qBAAT,GAA8B;AAC5B,IAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AAED,WAAS,oBAAT,CAA8B,OAA9B,EAAgD,YAAhD,EAAqE;AACnE,IAAA,QAAQ,CAAC,QAAT,CAAkB,YAAlB,EAAgC;AAAE,MAAA,MAAF;AAAU,MAAA,OAAV;AAAmB,MAAA;AAAnB,KAAhC;AACD;;AAED,QAAM;AAAE,IAAA;AAAF,MAAgB,MAAtB;AACA,EAAA,SAAS,GAAG,UAAU,CACpB,UADoB,EAEpB;AACE,uBAAmB,MAAM,CAAC,MAD5B;AAEE,4BAAwB,MAAM,CAAC,GAAP,KAAe;AAFzC,GAFoB,EAMpB,OAAO,SAAP,KAAqB,UAArB,GAAkC,SAAS,CAAC,GAAD,CAA3C,GAAmD,SAN/B,EAOpB,SAPoB,CAAtB;AAUA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,GAAG,EAAE,GADP;AAEE,IAAA,SAAS,EAAE,SAFb;AAGE,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE,MAAM,CAAC,KADT;AAEL,MAAA,IAAI,EAAE,MAAM,CAAC;AAFR,KAHT;AAOE,IAAA,OAAO,EAAE,SAAS,CAAC,eAAD,EAAkB,OAAlB,CAPpB;AAQE,IAAA,aAAa,EAAE,SAAS,CAAC,qBAAD,EAAwB,aAAxB,CAR1B;AASE,IAAA,aAAa,EAAE,SAAS,CAAC,qBAAD,EAAwB,aAAxB,CAT1B;AAUE,IAAA,UAAU,EAAE,SAAS,CAAC,cAAD,EAAiB,UAAjB;AAVvB,GAAA,EAWM,KAXN,CAAA,EAaE,KAAA,CAAA,aAAA,CAAC,MAAM,CAAC,SAAR,EAAiB;AACf,IAAA,MAAM,EAAE,MADO;AAEf,IAAA,MAAM,EAAE,MAFO;AAGf,IAAA,GAAG,EAAE,GAHU;AAIf,IAAA,aAAa,EAAE,aAJA;AAKf,IAAA,oBAAoB,EAAE;AALP,GAAjB,CAbF,CADF;AAuBD;;AAED,eAAe,IAAI,CAAC,UAAU,CAAC,IAAD,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport classNames from 'classnames';\n\nimport { CellRendererProps } from './common/types';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  row,\n  rowIdx,\n  eventBus,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onDragOver,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function selectCell(openEditor?: boolean) {\n    eventBus.dispatch('SELECT_CELL', { idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleCellClick() {\n    selectCell();\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleCellContextMenu() {\n    selectCell();\n  }\n\n  function handleCellDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    eventBus.dispatch('SELECT_ROW', { rowIdx, checked, isShiftClick });\n  }\n\n  const { cellClass } = column;\n  className = classNames(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onClick={wrapEvent(handleCellClick, onClick)}\n      onDoubleClick={wrapEvent(handleCellDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleCellContextMenu, onContextMenu)}\n      onDragOver={wrapEvent(preventDefault, onDragOver)}\n      {...props}\n    >\n      <column.formatter\n        column={column}\n        rowIdx={rowIdx}\n        row={row}\n        isRowSelected={isRowSelected}\n        onRowSelectionChange={onRowSelectionChange}\n      />\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR>) => JSX.Element;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}